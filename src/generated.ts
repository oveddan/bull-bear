// Generated by @wagmi/cli@0.1.11 on 3/4/2023 at 4:37:15â€¯PM
import {
  useNetwork,
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  Address,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig
} from 'wagmi';
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult
} from 'wagmi/actions';

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BullBear
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export const bullBearABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_initialBaseUri', internalType: 'string', type: 'string' }
    ]
  },
  {
    type: 'error',
    inputs: [{ name: 'minPetTime', internalType: 'uint256', type: 'uint256' }],
    name: 'TooSoonToPet'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'ApprovalForAll'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_fromTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      },
      {
        name: '_toTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      }
    ],
    name: 'BatchMetadataUpdate'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      }
    ],
    name: 'MetadataUpdate'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true
      }
    ],
    name: 'OwnershipTransferred'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'bullBearToken',
    outputs: [
      { name: '', internalType: 'contract BullBearToken', type: 'address' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'canPet',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getHappiness',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'happinessDecayRatePerMinute',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'initialHappiness',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' }
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'isRekt',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'minPettingIntervalSeconds',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'pet',
    outputs: []
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'pettingBonus',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'to', internalType: 'address', type: 'address' }],
    name: 'safeMint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' }
    ],
    name: 'setApprovalForAll',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: []
  }
] as const;

/**
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export const bullBearAddress = {
  5: '0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e',
  31337: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
  534353: '0xa6a8c083d22461C9CB60D7EFd364D82062d48434'
} as const;

/**
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export const bullBearConfig = {
  address: bullBearAddress,
  abi: bullBearABI
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MyToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const myTokenABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false
      }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'ApprovalForAll'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true
      }
    ],
    name: 'BeaconUpgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }
    ],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true
      }
    ],
    name: 'OwnershipTransferred'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'Transfer'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true
      }
    ],
    name: 'Upgraded'
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'initialize',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' }
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'to', internalType: 'address', type: 'address' }],
    name: 'safeMint',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' }
    ],
    name: 'setApprovalForAll',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' }
    ],
    name: 'upgradeTo',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'upgradeToAndCall',
    outputs: []
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BullBearFood
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bullBearFoodABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'ApprovalForAll'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true
      }
    ],
    name: 'OwnershipTransferred'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false
      }
    ],
    name: 'TransferBatch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      }
    ],
    name: 'TransferSingle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'URI'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' }
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' }
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'mint',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeBatchTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' }
    ],
    name: 'setApprovalForAll',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newuri', internalType: 'string', type: 'string' }],
    name: 'setURI',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'totalBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BullBearToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bullBearTokenABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true
      }
    ],
    name: 'OwnershipTransferred'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'mint',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: []
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ContextUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const contextUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }
    ],
    name: 'Initialized'
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Counter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const counterABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'increment',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'number',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'setNumber',
    outputs: []
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1155
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1155ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'uri_', internalType: 'string', type: 'string' }]
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'ApprovalForAll'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false
      }
    ],
    name: 'TransferBatch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      }
    ],
    name: 'TransferSingle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'URI'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' }
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' }
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeBatchTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' }
    ],
    name: 'setApprovalForAll',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }
    ],
    name: 'Initialized'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' }
    ]
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1155Supply
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1155SupplyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'ApprovalForAll'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false
      }
    ],
    name: 'TransferBatch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      }
    ],
    name: 'TransferSingle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'URI'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' }
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'exists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' }
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeBatchTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' }
    ],
    name: 'setApprovalForAll',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' }
    ]
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'ApprovalForAll'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' }
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' }
    ],
    name: 'setApprovalForAll',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: []
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1967UpgradeUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1967UpgradeUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false
      }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true
      }
    ],
    name: 'BeaconUpgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }
    ],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true
      }
    ],
    name: 'Upgraded'
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721URIStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721UriStorageABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'ApprovalForAll'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_fromTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      },
      {
        name: '_toTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      }
    ],
    name: 'BatchMetadataUpdate'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      }
    ],
    name: 'MetadataUpdate'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' }
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' }
    ],
    name: 'setApprovalForAll',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: []
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBeaconUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBeaconUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'ApprovalForAll'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false
      }
    ],
    name: 'TransferBatch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      }
    ],
    name: 'TransferSingle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'URI'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' }
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' }
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeBatchTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' }
    ],
    name: 'setApprovalForAll',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'ApprovalForAll'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }
    ],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' }
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' }
    ],
    name: 'setApprovalForAll',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: []
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155MetadataURI
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155MetadataUriABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'ApprovalForAll'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false
      }
    ],
    name: 'TransferBatch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      }
    ],
    name: 'TransferSingle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'URI'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' }
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' }
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeBatchTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' }
    ],
    name: 'setApprovalForAll',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155Receiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155ReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721URIStorageUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721UriStorageUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'ApprovalForAll'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }
    ],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' }
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' }
    ],
    name: 'setApprovalForAll',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: []
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165UpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC4906
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc4906ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'ApprovalForAll'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_fromTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      },
      {
        name: '_toTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      }
    ],
    name: 'BatchMetadataUpdate'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      }
    ],
    name: 'MetadataUpdate'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' }
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' }
    ],
    name: 'setApprovalForAll',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: []
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'ApprovalForAll'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' }
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' }
    ],
    name: 'setApprovalForAll',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: []
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'ApprovalForAll'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' }
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' }
    ],
    name: 'setApprovalForAll',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: []
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721MetadataUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721MetadataUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'ApprovalForAll'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' }
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' }
    ],
    name: 'setApprovalForAll',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: []
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721ReceiverUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ReceiverUpgradeableABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }]
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'ApprovalForAll'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' }
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' }
    ],
    name: 'setApprovalForAll',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: []
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initializable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const initializableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }
    ],
    name: 'Initialized'
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true
      }
    ],
    name: 'OwnershipTransferred'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: []
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Receiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }]
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OwnableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }
    ],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true
      }
    ],
    name: 'OwnershipTransferred'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: []
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UUPSUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const uupsUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false
      }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true
      }
    ],
    name: 'BeaconUpgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }
    ],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true
      }
    ],
    name: 'Upgraded'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' }
    ],
    name: 'upgradeTo',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'upgradeToAndCall',
    outputs: []
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1822ProxiableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1822ProxiableUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  }
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link bullBearABI}__.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBear(
  config: Omit<UseContractConfig, 'abi' | 'address'> & {
    chainId?: keyof typeof bullBearAddress;
  } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContract({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    ...config
  });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearABI}__.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bullBearABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    ...config
  } as UseContractReadConfig<typeof bullBearABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"balanceOf"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearBalanceOf<
  TSelectData = ReadContractResult<typeof bullBearABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearABI, 'balanceOf', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof bullBearABI, 'balanceOf', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"baseURI"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearBaseUri<
  TSelectData = ReadContractResult<typeof bullBearABI, 'baseURI'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearABI, 'baseURI', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'baseURI',
    ...config
  } as UseContractReadConfig<typeof bullBearABI, 'baseURI', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"bullBearToken"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearBullBearToken<
  TSelectData = ReadContractResult<typeof bullBearABI, 'bullBearToken'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearABI, 'bullBearToken', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'bullBearToken',
    ...config
  } as UseContractReadConfig<typeof bullBearABI, 'bullBearToken', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"canPet"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearCanPet<
  TSelectData = ReadContractResult<typeof bullBearABI, 'canPet'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearABI, 'canPet', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'canPet',
    ...config
  } as UseContractReadConfig<typeof bullBearABI, 'canPet', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"getApproved"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearGetApproved<
  TSelectData = ReadContractResult<typeof bullBearABI, 'getApproved'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearABI, 'getApproved', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'getApproved',
    ...config
  } as UseContractReadConfig<typeof bullBearABI, 'getApproved', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"getHappiness"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearGetHappiness<
  TSelectData = ReadContractResult<typeof bullBearABI, 'getHappiness'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearABI, 'getHappiness', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'getHappiness',
    ...config
  } as UseContractReadConfig<typeof bullBearABI, 'getHappiness', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"happinessDecayRatePerMinute"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearHappinessDecayRatePerMinute<
  TSelectData = ReadContractResult<
    typeof bullBearABI,
    'happinessDecayRatePerMinute'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof bullBearABI,
      'happinessDecayRatePerMinute',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'happinessDecayRatePerMinute',
    ...config
  } as UseContractReadConfig<
    typeof bullBearABI,
    'happinessDecayRatePerMinute',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"initialHappiness"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearInitialHappiness<
  TSelectData = ReadContractResult<typeof bullBearABI, 'initialHappiness'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearABI, 'initialHappiness', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'initialHappiness',
    ...config
  } as UseContractReadConfig<
    typeof bullBearABI,
    'initialHappiness',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"isApprovedForAll"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearIsApprovedForAll<
  TSelectData = ReadContractResult<typeof bullBearABI, 'isApprovedForAll'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'isApprovedForAll',
    ...config
  } as UseContractReadConfig<
    typeof bullBearABI,
    'isApprovedForAll',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"isRekt"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearIsRekt<
  TSelectData = ReadContractResult<typeof bullBearABI, 'isRekt'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearABI, 'isRekt', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'isRekt',
    ...config
  } as UseContractReadConfig<typeof bullBearABI, 'isRekt', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"minPettingIntervalSeconds"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearMinPettingIntervalSeconds<
  TSelectData = ReadContractResult<
    typeof bullBearABI,
    'minPettingIntervalSeconds'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof bullBearABI,
      'minPettingIntervalSeconds',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'minPettingIntervalSeconds',
    ...config
  } as UseContractReadConfig<
    typeof bullBearABI,
    'minPettingIntervalSeconds',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"name"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearName<
  TSelectData = ReadContractResult<typeof bullBearABI, 'name'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearABI, 'name', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof bullBearABI, 'name', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"owner"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearOwner<
  TSelectData = ReadContractResult<typeof bullBearABI, 'owner'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearABI, 'owner', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'owner',
    ...config
  } as UseContractReadConfig<typeof bullBearABI, 'owner', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"ownerOf"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearOwnerOf<
  TSelectData = ReadContractResult<typeof bullBearABI, 'ownerOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearABI, 'ownerOf', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'ownerOf',
    ...config
  } as UseContractReadConfig<typeof bullBearABI, 'ownerOf', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"pettingBonus"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearPettingBonus<
  TSelectData = ReadContractResult<typeof bullBearABI, 'pettingBonus'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearABI, 'pettingBonus', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'pettingBonus',
    ...config
  } as UseContractReadConfig<typeof bullBearABI, 'pettingBonus', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearSupportsInterface<
  TSelectData = ReadContractResult<typeof bullBearABI, 'supportsInterface'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearABI, 'supportsInterface', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<
    typeof bullBearABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"symbol"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearSymbol<
  TSelectData = ReadContractResult<typeof bullBearABI, 'symbol'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearABI, 'symbol', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof bullBearABI, 'symbol', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"tokenURI"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearTokenUri<
  TSelectData = ReadContractResult<typeof bullBearABI, 'tokenURI'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearABI, 'tokenURI', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'tokenURI',
    ...config
  } as UseContractReadConfig<typeof bullBearABI, 'tokenURI', TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearABI}__.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
  TChainId extends number = keyof typeof bullBearAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bullBearABI, string>['abi'],
        TFunctionName
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<TMode, typeof bullBearABI, TFunctionName> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<TMode, typeof bullBearABI, TFunctionName>({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"approve"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearApprove<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof bullBearAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bullBearABI, 'approve'>['abi'],
        'approve'
      > & { address?: Address; chainId?: TChainId; functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof bullBearABI, 'approve'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'approve';
      } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<TMode, typeof bullBearABI, 'approve'>({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'approve',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"pet"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearPet<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof bullBearAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bullBearABI, 'pet'>['abi'],
        'pet'
      > & { address?: Address; chainId?: TChainId; functionName?: 'pet' }
    : UseContractWriteConfig<TMode, typeof bullBearABI, 'pet'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'pet';
      } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<TMode, typeof bullBearABI, 'pet'>({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'pet',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearRenounceOwnership<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof bullBearAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bullBearABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'renounceOwnership';
      }
    : UseContractWriteConfig<TMode, typeof bullBearABI, 'renounceOwnership'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'renounceOwnership';
      } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<TMode, typeof bullBearABI, 'renounceOwnership'>({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'renounceOwnership',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"safeMint"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearSafeMint<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof bullBearAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bullBearABI, 'safeMint'>['abi'],
        'safeMint'
      > & { address?: Address; chainId?: TChainId; functionName?: 'safeMint' }
    : UseContractWriteConfig<TMode, typeof bullBearABI, 'safeMint'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'safeMint';
      } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<TMode, typeof bullBearABI, 'safeMint'>({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'safeMint',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearSafeTransferFrom<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof bullBearAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bullBearABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'safeTransferFrom';
      }
    : UseContractWriteConfig<TMode, typeof bullBearABI, 'safeTransferFrom'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'safeTransferFrom';
      } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<TMode, typeof bullBearABI, 'safeTransferFrom'>({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'safeTransferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearSetApprovalForAll<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof bullBearAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bullBearABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'setApprovalForAll';
      }
    : UseContractWriteConfig<TMode, typeof bullBearABI, 'setApprovalForAll'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'setApprovalForAll';
      } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<TMode, typeof bullBearABI, 'setApprovalForAll'>({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'setApprovalForAll',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"transferFrom"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearTransferFrom<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof bullBearAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bullBearABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'transferFrom';
      }
    : UseContractWriteConfig<TMode, typeof bullBearABI, 'transferFrom'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'transferFrom';
      } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<TMode, typeof bullBearABI, 'transferFrom'>({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'transferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearTransferOwnership<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof bullBearAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bullBearABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'transferOwnership';
      }
    : UseContractWriteConfig<TMode, typeof bullBearABI, 'transferOwnership'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'transferOwnership';
      } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<TMode, typeof bullBearABI, 'transferOwnership'>({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'transferOwnership',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearABI}__.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function usePrepareBullBearWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    ...config
  } as UsePrepareContractWriteConfig<typeof bullBearABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"approve"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function usePrepareBullBearApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearABI, 'approve'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof bullBearABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"pet"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function usePrepareBullBearPet(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearABI, 'pet'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'pet',
    ...config
  } as UsePrepareContractWriteConfig<typeof bullBearABI, 'pet'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function usePrepareBullBearRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'renounceOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof bullBearABI, 'renounceOwnership'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"safeMint"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function usePrepareBullBearSafeMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearABI, 'safeMint'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'safeMint',
    ...config
  } as UsePrepareContractWriteConfig<typeof bullBearABI, 'safeMint'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function usePrepareBullBearSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearABI, 'safeTransferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'safeTransferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof bullBearABI, 'safeTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function usePrepareBullBearSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearABI, 'setApprovalForAll'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'setApprovalForAll',
    ...config
  } as UsePrepareContractWriteConfig<typeof bullBearABI, 'setApprovalForAll'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"transferFrom"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function usePrepareBullBearTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearABI, 'transferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof bullBearABI, 'transferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function usePrepareBullBearTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    functionName: 'transferOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof bullBearABI, 'transferOwnership'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bullBearABI}__.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bullBearABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractEvent({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    ...config
  } as UseContractEventConfig<typeof bullBearABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bullBearABI}__ and `eventName` set to `"Approval"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof bullBearABI, 'Approval'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractEvent({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof bullBearABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bullBearABI}__ and `eventName` set to `"ApprovalForAll"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof bullBearABI, 'ApprovalForAll'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractEvent({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    eventName: 'ApprovalForAll',
    ...config
  } as UseContractEventConfig<typeof bullBearABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bullBearABI}__ and `eventName` set to `"BatchMetadataUpdate"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearBatchMetadataUpdateEvent(
  config: Omit<
    UseContractEventConfig<typeof bullBearABI, 'BatchMetadataUpdate'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractEvent({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    eventName: 'BatchMetadataUpdate',
    ...config
  } as UseContractEventConfig<typeof bullBearABI, 'BatchMetadataUpdate'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bullBearABI}__ and `eventName` set to `"MetadataUpdate"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearMetadataUpdateEvent(
  config: Omit<
    UseContractEventConfig<typeof bullBearABI, 'MetadataUpdate'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractEvent({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    eventName: 'MetadataUpdate',
    ...config
  } as UseContractEventConfig<typeof bullBearABI, 'MetadataUpdate'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bullBearABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof bullBearABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractEvent({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    eventName: 'OwnershipTransferred',
    ...config
  } as UseContractEventConfig<typeof bullBearABI, 'OwnershipTransferred'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bullBearABI}__ and `eventName` set to `"Transfer"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x68bac2d9e4e429010D3DdC5f00d33f28c9de1B2e)
 * -
 */
export function useBullBearTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof bullBearABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof bullBearAddress } = {} as any
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractEvent({
    abi: bullBearABI,
    address: bullBearAddress[chainId as keyof typeof bullBearAddress],
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof bullBearABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link myTokenABI}__.
 */
export function useMyToken(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: myTokenABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link myTokenABI}__.
 */
export function useMyTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof myTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof myTokenABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: myTokenABI,
    ...config
  } as UseContractReadConfig<typeof myTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMyTokenBalanceOf<
  TSelectData = ReadContractResult<typeof myTokenABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof myTokenABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: myTokenABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof myTokenABI, 'balanceOf', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"getApproved"`.
 */
export function useMyTokenGetApproved<
  TSelectData = ReadContractResult<typeof myTokenABI, 'getApproved'>
>(
  config: Omit<
    UseContractReadConfig<typeof myTokenABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: myTokenABI,
    functionName: 'getApproved',
    ...config
  } as UseContractReadConfig<typeof myTokenABI, 'getApproved', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useMyTokenIsApprovedForAll<
  TSelectData = ReadContractResult<typeof myTokenABI, 'isApprovedForAll'>
>(
  config: Omit<
    UseContractReadConfig<typeof myTokenABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: myTokenABI,
    functionName: 'isApprovedForAll',
    ...config
  } as UseContractReadConfig<
    typeof myTokenABI,
    'isApprovedForAll',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"name"`.
 */
export function useMyTokenName<
  TSelectData = ReadContractResult<typeof myTokenABI, 'name'>
>(
  config: Omit<
    UseContractReadConfig<typeof myTokenABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: myTokenABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof myTokenABI, 'name', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"owner"`.
 */
export function useMyTokenOwner<
  TSelectData = ReadContractResult<typeof myTokenABI, 'owner'>
>(
  config: Omit<
    UseContractReadConfig<typeof myTokenABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: myTokenABI,
    functionName: 'owner',
    ...config
  } as UseContractReadConfig<typeof myTokenABI, 'owner', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useMyTokenOwnerOf<
  TSelectData = ReadContractResult<typeof myTokenABI, 'ownerOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof myTokenABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: myTokenABI,
    functionName: 'ownerOf',
    ...config
  } as UseContractReadConfig<typeof myTokenABI, 'ownerOf', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useMyTokenProxiableUuid<
  TSelectData = ReadContractResult<typeof myTokenABI, 'proxiableUUID'>
>(
  config: Omit<
    UseContractReadConfig<typeof myTokenABI, 'proxiableUUID', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: myTokenABI,
    functionName: 'proxiableUUID',
    ...config
  } as UseContractReadConfig<typeof myTokenABI, 'proxiableUUID', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useMyTokenSupportsInterface<
  TSelectData = ReadContractResult<typeof myTokenABI, 'supportsInterface'>
>(
  config: Omit<
    UseContractReadConfig<typeof myTokenABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: myTokenABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<
    typeof myTokenABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useMyTokenSymbol<
  TSelectData = ReadContractResult<typeof myTokenABI, 'symbol'>
>(
  config: Omit<
    UseContractReadConfig<typeof myTokenABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: myTokenABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof myTokenABI, 'symbol', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useMyTokenTokenUri<
  TSelectData = ReadContractResult<typeof myTokenABI, 'tokenURI'>
>(
  config: Omit<
    UseContractReadConfig<typeof myTokenABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: myTokenABI,
    functionName: 'tokenURI',
    ...config
  } as UseContractReadConfig<typeof myTokenABI, 'tokenURI', TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link myTokenABI}__.
 */
export function useMyTokenWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof myTokenABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof myTokenABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof myTokenABI, TFunctionName>({
    abi: myTokenABI,
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useMyTokenApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof myTokenABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof myTokenABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<TMode, typeof myTokenABI, 'approve'>({
    abi: myTokenABI,
    functionName: 'approve',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function useMyTokenInitialize<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof myTokenABI, 'initialize'>['abi'],
        'initialize'
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<TMode, typeof myTokenABI, 'initialize'> & {
        abi?: never;
        functionName?: 'initialize';
      } = {} as any
) {
  return useContractWrite<TMode, typeof myTokenABI, 'initialize'>({
    abi: myTokenABI,
    functionName: 'initialize',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useMyTokenRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof myTokenABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof myTokenABI, 'renounceOwnership'> & {
        abi?: never;
        functionName?: 'renounceOwnership';
      } = {} as any
) {
  return useContractWrite<TMode, typeof myTokenABI, 'renounceOwnership'>({
    abi: myTokenABI,
    functionName: 'renounceOwnership',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"safeMint"`.
 */
export function useMyTokenSafeMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof myTokenABI, 'safeMint'>['abi'],
        'safeMint'
      > & { functionName?: 'safeMint' }
    : UseContractWriteConfig<TMode, typeof myTokenABI, 'safeMint'> & {
        abi?: never;
        functionName?: 'safeMint';
      } = {} as any
) {
  return useContractWrite<TMode, typeof myTokenABI, 'safeMint'>({
    abi: myTokenABI,
    functionName: 'safeMint',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useMyTokenSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof myTokenABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof myTokenABI, 'safeTransferFrom'> & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof myTokenABI, 'safeTransferFrom'>({
    abi: myTokenABI,
    functionName: 'safeTransferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useMyTokenSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof myTokenABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof myTokenABI, 'setApprovalForAll'> & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any
) {
  return useContractWrite<TMode, typeof myTokenABI, 'setApprovalForAll'>({
    abi: myTokenABI,
    functionName: 'setApprovalForAll',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMyTokenTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof myTokenABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof myTokenABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof myTokenABI, 'transferFrom'>({
    abi: myTokenABI,
    functionName: 'transferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useMyTokenTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof myTokenABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof myTokenABI, 'transferOwnership'> & {
        abi?: never;
        functionName?: 'transferOwnership';
      } = {} as any
) {
  return useContractWrite<TMode, typeof myTokenABI, 'transferOwnership'>({
    abi: myTokenABI,
    functionName: 'transferOwnership',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useMyTokenUpgradeTo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof myTokenABI, 'upgradeTo'>['abi'],
        'upgradeTo'
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<TMode, typeof myTokenABI, 'upgradeTo'> & {
        abi?: never;
        functionName?: 'upgradeTo';
      } = {} as any
) {
  return useContractWrite<TMode, typeof myTokenABI, 'upgradeTo'>({
    abi: myTokenABI,
    functionName: 'upgradeTo',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useMyTokenUpgradeToAndCall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof myTokenABI,
          'upgradeToAndCall'
        >['abi'],
        'upgradeToAndCall'
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<TMode, typeof myTokenABI, 'upgradeToAndCall'> & {
        abi?: never;
        functionName?: 'upgradeToAndCall';
      } = {} as any
) {
  return useContractWrite<TMode, typeof myTokenABI, 'upgradeToAndCall'>({
    abi: myTokenABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link myTokenABI}__.
 */
export function usePrepareMyTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof myTokenABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: myTokenABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof myTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareMyTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof myTokenABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: myTokenABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof myTokenABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareMyTokenInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof myTokenABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: myTokenABI,
    functionName: 'initialize',
    ...config
  } as UsePrepareContractWriteConfig<typeof myTokenABI, 'initialize'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareMyTokenRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof myTokenABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: myTokenABI,
    functionName: 'renounceOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof myTokenABI, 'renounceOwnership'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"safeMint"`.
 */
export function usePrepareMyTokenSafeMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof myTokenABI, 'safeMint'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: myTokenABI,
    functionName: 'safeMint',
    ...config
  } as UsePrepareContractWriteConfig<typeof myTokenABI, 'safeMint'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareMyTokenSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof myTokenABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: myTokenABI,
    functionName: 'safeTransferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof myTokenABI, 'safeTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareMyTokenSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof myTokenABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: myTokenABI,
    functionName: 'setApprovalForAll',
    ...config
  } as UsePrepareContractWriteConfig<typeof myTokenABI, 'setApprovalForAll'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMyTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof myTokenABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: myTokenABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof myTokenABI, 'transferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareMyTokenTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof myTokenABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: myTokenABI,
    functionName: 'transferOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof myTokenABI, 'transferOwnership'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareMyTokenUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof myTokenABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: myTokenABI,
    functionName: 'upgradeTo',
    ...config
  } as UsePrepareContractWriteConfig<typeof myTokenABI, 'upgradeTo'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareMyTokenUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof myTokenABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: myTokenABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as UsePrepareContractWriteConfig<typeof myTokenABI, 'upgradeToAndCall'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link myTokenABI}__.
 */
export function useMyTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof myTokenABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: myTokenABI,
    ...config
  } as UseContractEventConfig<typeof myTokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link myTokenABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useMyTokenAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof myTokenABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: myTokenABI,
    eventName: 'AdminChanged',
    ...config
  } as UseContractEventConfig<typeof myTokenABI, 'AdminChanged'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link myTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useMyTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof myTokenABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: myTokenABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof myTokenABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link myTokenABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useMyTokenApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof myTokenABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: myTokenABI,
    eventName: 'ApprovalForAll',
    ...config
  } as UseContractEventConfig<typeof myTokenABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link myTokenABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useMyTokenBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof myTokenABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: myTokenABI,
    eventName: 'BeaconUpgraded',
    ...config
  } as UseContractEventConfig<typeof myTokenABI, 'BeaconUpgraded'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link myTokenABI}__ and `eventName` set to `"Initialized"`.
 */
export function useMyTokenInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof myTokenABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: myTokenABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof myTokenABI, 'Initialized'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link myTokenABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useMyTokenOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof myTokenABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: myTokenABI,
    eventName: 'OwnershipTransferred',
    ...config
  } as UseContractEventConfig<typeof myTokenABI, 'OwnershipTransferred'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link myTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useMyTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof myTokenABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: myTokenABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof myTokenABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link myTokenABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useMyTokenUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof myTokenABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: myTokenABI,
    eventName: 'Upgraded',
    ...config
  } as UseContractEventConfig<typeof myTokenABI, 'Upgraded'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link bullBearFoodABI}__.
 */
export function useBullBearFood(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: bullBearFoodABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearFoodABI}__.
 */
export function useBullBearFoodRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bullBearFoodABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearFoodABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: bullBearFoodABI,
    ...config
  } as UseContractReadConfig<
    typeof bullBearFoodABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearFoodABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useBullBearFoodBalanceOf<
  TSelectData = ReadContractResult<typeof bullBearFoodABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearFoodABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bullBearFoodABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof bullBearFoodABI, 'balanceOf', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearFoodABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useBullBearFoodBalanceOfBatch<
  TSelectData = ReadContractResult<typeof bullBearFoodABI, 'balanceOfBatch'>
>(
  config: Omit<
    UseContractReadConfig<
      typeof bullBearFoodABI,
      'balanceOfBatch',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bullBearFoodABI,
    functionName: 'balanceOfBatch',
    ...config
  } as UseContractReadConfig<
    typeof bullBearFoodABI,
    'balanceOfBatch',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearFoodABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useBullBearFoodIsApprovedForAll<
  TSelectData = ReadContractResult<typeof bullBearFoodABI, 'isApprovedForAll'>
>(
  config: Omit<
    UseContractReadConfig<
      typeof bullBearFoodABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bullBearFoodABI,
    functionName: 'isApprovedForAll',
    ...config
  } as UseContractReadConfig<
    typeof bullBearFoodABI,
    'isApprovedForAll',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearFoodABI}__ and `functionName` set to `"owner"`.
 */
export function useBullBearFoodOwner<
  TSelectData = ReadContractResult<typeof bullBearFoodABI, 'owner'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearFoodABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bullBearFoodABI,
    functionName: 'owner',
    ...config
  } as UseContractReadConfig<typeof bullBearFoodABI, 'owner', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearFoodABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useBullBearFoodSupportsInterface<
  TSelectData = ReadContractResult<typeof bullBearFoodABI, 'supportsInterface'>
>(
  config: Omit<
    UseContractReadConfig<
      typeof bullBearFoodABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bullBearFoodABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<
    typeof bullBearFoodABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearFoodABI}__ and `functionName` set to `"totalBalance"`.
 */
export function useBullBearFoodTotalBalance<
  TSelectData = ReadContractResult<typeof bullBearFoodABI, 'totalBalance'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearFoodABI, 'totalBalance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bullBearFoodABI,
    functionName: 'totalBalance',
    ...config
  } as UseContractReadConfig<
    typeof bullBearFoodABI,
    'totalBalance',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearFoodABI}__ and `functionName` set to `"uri"`.
 */
export function useBullBearFoodUri<
  TSelectData = ReadContractResult<typeof bullBearFoodABI, 'uri'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearFoodABI, 'uri', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bullBearFoodABI,
    functionName: 'uri',
    ...config
  } as UseContractReadConfig<typeof bullBearFoodABI, 'uri', TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearFoodABI}__.
 */
export function useBullBearFoodWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bullBearFoodABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof bullBearFoodABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof bullBearFoodABI, TFunctionName>({
    abi: bullBearFoodABI,
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearFoodABI}__ and `functionName` set to `"mint"`.
 */
export function useBullBearFoodMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bullBearFoodABI, 'mint'>['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof bullBearFoodABI, 'mint'> & {
        abi?: never;
        functionName?: 'mint';
      } = {} as any
) {
  return useContractWrite<TMode, typeof bullBearFoodABI, 'mint'>({
    abi: bullBearFoodABI,
    functionName: 'mint',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearFoodABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useBullBearFoodRenounceOwnership<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bullBearFoodABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof bullBearFoodABI,
        'renounceOwnership'
      > & {
        abi?: never;
        functionName?: 'renounceOwnership';
      } = {} as any
) {
  return useContractWrite<TMode, typeof bullBearFoodABI, 'renounceOwnership'>({
    abi: bullBearFoodABI,
    functionName: 'renounceOwnership',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearFoodABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useBullBearFoodSafeBatchTransferFrom<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bullBearFoodABI,
          'safeBatchTransferFrom'
        >['abi'],
        'safeBatchTransferFrom'
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof bullBearFoodABI,
        'safeBatchTransferFrom'
      > & {
        abi?: never;
        functionName?: 'safeBatchTransferFrom';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof bullBearFoodABI,
    'safeBatchTransferFrom'
  >({
    abi: bullBearFoodABI,
    functionName: 'safeBatchTransferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearFoodABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useBullBearFoodSafeTransferFrom<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bullBearFoodABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof bullBearFoodABI,
        'safeTransferFrom'
      > & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof bullBearFoodABI, 'safeTransferFrom'>({
    abi: bullBearFoodABI,
    functionName: 'safeTransferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearFoodABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useBullBearFoodSetApprovalForAll<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bullBearFoodABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof bullBearFoodABI,
        'setApprovalForAll'
      > & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any
) {
  return useContractWrite<TMode, typeof bullBearFoodABI, 'setApprovalForAll'>({
    abi: bullBearFoodABI,
    functionName: 'setApprovalForAll',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearFoodABI}__ and `functionName` set to `"setURI"`.
 */
export function useBullBearFoodSetUri<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bullBearFoodABI, 'setURI'>['abi'],
        'setURI'
      > & { functionName?: 'setURI' }
    : UseContractWriteConfig<TMode, typeof bullBearFoodABI, 'setURI'> & {
        abi?: never;
        functionName?: 'setURI';
      } = {} as any
) {
  return useContractWrite<TMode, typeof bullBearFoodABI, 'setURI'>({
    abi: bullBearFoodABI,
    functionName: 'setURI',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearFoodABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useBullBearFoodTransferOwnership<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bullBearFoodABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof bullBearFoodABI,
        'transferOwnership'
      > & {
        abi?: never;
        functionName?: 'transferOwnership';
      } = {} as any
) {
  return useContractWrite<TMode, typeof bullBearFoodABI, 'transferOwnership'>({
    abi: bullBearFoodABI,
    functionName: 'transferOwnership',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearFoodABI}__.
 */
export function usePrepareBullBearFoodWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearFoodABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bullBearFoodABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof bullBearFoodABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearFoodABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareBullBearFoodMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearFoodABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bullBearFoodABI,
    functionName: 'mint',
    ...config
  } as UsePrepareContractWriteConfig<typeof bullBearFoodABI, 'mint'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearFoodABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareBullBearFoodRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearFoodABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bullBearFoodABI,
    functionName: 'renounceOwnership',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof bullBearFoodABI,
    'renounceOwnership'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearFoodABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareBullBearFoodSafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bullBearFoodABI,
      'safeBatchTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bullBearFoodABI,
    functionName: 'safeBatchTransferFrom',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof bullBearFoodABI,
    'safeBatchTransferFrom'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearFoodABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareBullBearFoodSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearFoodABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bullBearFoodABI,
    functionName: 'safeTransferFrom',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof bullBearFoodABI,
    'safeTransferFrom'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearFoodABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareBullBearFoodSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearFoodABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bullBearFoodABI,
    functionName: 'setApprovalForAll',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof bullBearFoodABI,
    'setApprovalForAll'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearFoodABI}__ and `functionName` set to `"setURI"`.
 */
export function usePrepareBullBearFoodSetUri(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearFoodABI, 'setURI'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bullBearFoodABI,
    functionName: 'setURI',
    ...config
  } as UsePrepareContractWriteConfig<typeof bullBearFoodABI, 'setURI'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearFoodABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareBullBearFoodTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearFoodABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bullBearFoodABI,
    functionName: 'transferOwnership',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof bullBearFoodABI,
    'transferOwnership'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bullBearFoodABI}__.
 */
export function useBullBearFoodEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bullBearFoodABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: bullBearFoodABI,
    ...config
  } as UseContractEventConfig<typeof bullBearFoodABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bullBearFoodABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useBullBearFoodApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof bullBearFoodABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: bullBearFoodABI,
    eventName: 'ApprovalForAll',
    ...config
  } as UseContractEventConfig<typeof bullBearFoodABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bullBearFoodABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useBullBearFoodOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof bullBearFoodABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: bullBearFoodABI,
    eventName: 'OwnershipTransferred',
    ...config
  } as UseContractEventConfig<typeof bullBearFoodABI, 'OwnershipTransferred'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bullBearFoodABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useBullBearFoodTransferBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof bullBearFoodABI, 'TransferBatch'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: bullBearFoodABI,
    eventName: 'TransferBatch',
    ...config
  } as UseContractEventConfig<typeof bullBearFoodABI, 'TransferBatch'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bullBearFoodABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useBullBearFoodTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof bullBearFoodABI, 'TransferSingle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: bullBearFoodABI,
    eventName: 'TransferSingle',
    ...config
  } as UseContractEventConfig<typeof bullBearFoodABI, 'TransferSingle'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bullBearFoodABI}__ and `eventName` set to `"URI"`.
 */
export function useBullBearFoodUriEvent(
  config: Omit<
    UseContractEventConfig<typeof bullBearFoodABI, 'URI'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: bullBearFoodABI,
    eventName: 'URI',
    ...config
  } as UseContractEventConfig<typeof bullBearFoodABI, 'URI'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link bullBearTokenABI}__.
 */
export function useBullBearToken(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: bullBearTokenABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearTokenABI}__.
 */
export function useBullBearTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bullBearTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearTokenABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: bullBearTokenABI,
    ...config
  } as UseContractReadConfig<
    typeof bullBearTokenABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useBullBearTokenAllowance<
  TSelectData = ReadContractResult<typeof bullBearTokenABI, 'allowance'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearTokenABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bullBearTokenABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<
    typeof bullBearTokenABI,
    'allowance',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useBullBearTokenBalanceOf<
  TSelectData = ReadContractResult<typeof bullBearTokenABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearTokenABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bullBearTokenABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<
    typeof bullBearTokenABI,
    'balanceOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useBullBearTokenDecimals<
  TSelectData = ReadContractResult<typeof bullBearTokenABI, 'decimals'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearTokenABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bullBearTokenABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof bullBearTokenABI, 'decimals', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearTokenABI}__ and `functionName` set to `"name"`.
 */
export function useBullBearTokenName<
  TSelectData = ReadContractResult<typeof bullBearTokenABI, 'name'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearTokenABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bullBearTokenABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof bullBearTokenABI, 'name', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearTokenABI}__ and `functionName` set to `"owner"`.
 */
export function useBullBearTokenOwner<
  TSelectData = ReadContractResult<typeof bullBearTokenABI, 'owner'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearTokenABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bullBearTokenABI,
    functionName: 'owner',
    ...config
  } as UseContractReadConfig<typeof bullBearTokenABI, 'owner', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useBullBearTokenSymbol<
  TSelectData = ReadContractResult<typeof bullBearTokenABI, 'symbol'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearTokenABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bullBearTokenABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof bullBearTokenABI, 'symbol', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bullBearTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useBullBearTokenTotalSupply<
  TSelectData = ReadContractResult<typeof bullBearTokenABI, 'totalSupply'>
>(
  config: Omit<
    UseContractReadConfig<typeof bullBearTokenABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: bullBearTokenABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<
    typeof bullBearTokenABI,
    'totalSupply',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearTokenABI}__.
 */
export function useBullBearTokenWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bullBearTokenABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof bullBearTokenABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof bullBearTokenABI, TFunctionName>({
    abi: bullBearTokenABI,
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useBullBearTokenApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bullBearTokenABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof bullBearTokenABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<TMode, typeof bullBearTokenABI, 'approve'>({
    abi: bullBearTokenABI,
    functionName: 'approve',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useBullBearTokenDecreaseAllowance<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bullBearTokenABI,
          'decreaseAllowance'
        >['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof bullBearTokenABI,
        'decreaseAllowance'
      > & {
        abi?: never;
        functionName?: 'decreaseAllowance';
      } = {} as any
) {
  return useContractWrite<TMode, typeof bullBearTokenABI, 'decreaseAllowance'>({
    abi: bullBearTokenABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useBullBearTokenIncreaseAllowance<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bullBearTokenABI,
          'increaseAllowance'
        >['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof bullBearTokenABI,
        'increaseAllowance'
      > & {
        abi?: never;
        functionName?: 'increaseAllowance';
      } = {} as any
) {
  return useContractWrite<TMode, typeof bullBearTokenABI, 'increaseAllowance'>({
    abi: bullBearTokenABI,
    functionName: 'increaseAllowance',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useBullBearTokenMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bullBearTokenABI, 'mint'>['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof bullBearTokenABI, 'mint'> & {
        abi?: never;
        functionName?: 'mint';
      } = {} as any
) {
  return useContractWrite<TMode, typeof bullBearTokenABI, 'mint'>({
    abi: bullBearTokenABI,
    functionName: 'mint',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useBullBearTokenRenounceOwnership<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bullBearTokenABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof bullBearTokenABI,
        'renounceOwnership'
      > & {
        abi?: never;
        functionName?: 'renounceOwnership';
      } = {} as any
) {
  return useContractWrite<TMode, typeof bullBearTokenABI, 'renounceOwnership'>({
    abi: bullBearTokenABI,
    functionName: 'renounceOwnership',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useBullBearTokenTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bullBearTokenABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof bullBearTokenABI, 'transfer'> & {
        abi?: never;
        functionName?: 'transfer';
      } = {} as any
) {
  return useContractWrite<TMode, typeof bullBearTokenABI, 'transfer'>({
    abi: bullBearTokenABI,
    functionName: 'transfer',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useBullBearTokenTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bullBearTokenABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof bullBearTokenABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof bullBearTokenABI, 'transferFrom'>({
    abi: bullBearTokenABI,
    functionName: 'transferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bullBearTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useBullBearTokenTransferOwnership<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bullBearTokenABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof bullBearTokenABI,
        'transferOwnership'
      > & {
        abi?: never;
        functionName?: 'transferOwnership';
      } = {} as any
) {
  return useContractWrite<TMode, typeof bullBearTokenABI, 'transferOwnership'>({
    abi: bullBearTokenABI,
    functionName: 'transferOwnership',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearTokenABI}__.
 */
export function usePrepareBullBearTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearTokenABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bullBearTokenABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof bullBearTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareBullBearTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearTokenABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bullBearTokenABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof bullBearTokenABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareBullBearTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearTokenABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bullBearTokenABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof bullBearTokenABI,
    'decreaseAllowance'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareBullBearTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearTokenABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bullBearTokenABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof bullBearTokenABI,
    'increaseAllowance'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareBullBearTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearTokenABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bullBearTokenABI,
    functionName: 'mint',
    ...config
  } as UsePrepareContractWriteConfig<typeof bullBearTokenABI, 'mint'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareBullBearTokenRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearTokenABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bullBearTokenABI,
    functionName: 'renounceOwnership',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof bullBearTokenABI,
    'renounceOwnership'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareBullBearTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearTokenABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bullBearTokenABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof bullBearTokenABI, 'transfer'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareBullBearTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearTokenABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bullBearTokenABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof bullBearTokenABI, 'transferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bullBearTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareBullBearTokenTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bullBearTokenABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bullBearTokenABI,
    functionName: 'transferOwnership',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof bullBearTokenABI,
    'transferOwnership'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bullBearTokenABI}__.
 */
export function useBullBearTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bullBearTokenABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: bullBearTokenABI,
    ...config
  } as UseContractEventConfig<typeof bullBearTokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bullBearTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useBullBearTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof bullBearTokenABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: bullBearTokenABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof bullBearTokenABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bullBearTokenABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useBullBearTokenOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof bullBearTokenABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: bullBearTokenABI,
    eventName: 'OwnershipTransferred',
    ...config
  } as UseContractEventConfig<typeof bullBearTokenABI, 'OwnershipTransferred'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bullBearTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useBullBearTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof bullBearTokenABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: bullBearTokenABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof bullBearTokenABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link contextUpgradeableABI}__.
 */
export function useContextUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: contextUpgradeableABI, ...config });
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__.
 */
export function useContextUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof contextUpgradeableABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: contextUpgradeableABI,
    ...config
  } as UseContractEventConfig<typeof contextUpgradeableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useContextUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof contextUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: contextUpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof contextUpgradeableABI, 'Initialized'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounter(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: counterABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof counterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: counterABI,
    ...config
  } as UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"getNumber"`.
 */
export function useCounterGetNumber<
  TSelectData = ReadContractResult<typeof counterABI, 'getNumber'>
>(
  config: Omit<
    UseContractReadConfig<typeof counterABI, 'getNumber', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: counterABI,
    functionName: 'getNumber',
    ...config
  } as UseContractReadConfig<typeof counterABI, 'getNumber', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"number"`.
 */
export function useCounterNumber<
  TSelectData = ReadContractResult<typeof counterABI, 'number'>
>(
  config: Omit<
    UseContractReadConfig<typeof counterABI, 'number', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: counterABI,
    functionName: 'number',
    ...config
  } as UseContractReadConfig<typeof counterABI, 'number', TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof counterABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof counterABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof counterABI, TFunctionName>({
    abi: counterABI,
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"increment"`.
 */
export function useCounterIncrement<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof counterABI, 'increment'>['abi'],
        'increment'
      > & { functionName?: 'increment' }
    : UseContractWriteConfig<TMode, typeof counterABI, 'increment'> & {
        abi?: never;
        functionName?: 'increment';
      } = {} as any
) {
  return useContractWrite<TMode, typeof counterABI, 'increment'>({
    abi: counterABI,
    functionName: 'increment',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"setNumber"`.
 */
export function useCounterSetNumber<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof counterABI, 'setNumber'>['abi'],
        'setNumber'
      > & { functionName?: 'setNumber' }
    : UseContractWriteConfig<TMode, typeof counterABI, 'setNumber'> & {
        abi?: never;
        functionName?: 'setNumber';
      } = {} as any
) {
  return useContractWrite<TMode, typeof counterABI, 'setNumber'>({
    abi: counterABI,
    functionName: 'setNumber',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__.
 */
export function usePrepareCounterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: counterABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof counterABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"increment"`.
 */
export function usePrepareCounterIncrement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, 'increment'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: counterABI,
    functionName: 'increment',
    ...config
  } as UsePrepareContractWriteConfig<typeof counterABI, 'increment'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"setNumber"`.
 */
export function usePrepareCounterSetNumber(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, 'setNumber'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: counterABI,
    functionName: 'setNumber',
    ...config
  } as UsePrepareContractWriteConfig<typeof counterABI, 'setNumber'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof counterABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: counterABI,
    ...config
  } as UseContractEventConfig<typeof counterABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterABI}__ and `eventName` set to `"Transfer"`.
 */
export function useCounterTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof counterABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: counterABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof counterABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc1155ABI}__.
 */
export function useErc1155(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc1155ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__.
 */
export function useErc1155Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc1155ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: erc1155ABI,
    ...config
  } as UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc1155BalanceOf<
  TSelectData = ReadContractResult<typeof erc1155ABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc1155ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc1155ABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof erc1155ABI, 'balanceOf', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useErc1155BalanceOfBatch<
  TSelectData = ReadContractResult<typeof erc1155ABI, 'balanceOfBatch'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc1155ABI, 'balanceOfBatch', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc1155ABI,
    functionName: 'balanceOfBatch',
    ...config
  } as UseContractReadConfig<typeof erc1155ABI, 'balanceOfBatch', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc1155IsApprovedForAll<
  TSelectData = ReadContractResult<typeof erc1155ABI, 'isApprovedForAll'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc1155ABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc1155ABI,
    functionName: 'isApprovedForAll',
    ...config
  } as UseContractReadConfig<
    typeof erc1155ABI,
    'isApprovedForAll',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc1155SupportsInterface<
  TSelectData = ReadContractResult<typeof erc1155ABI, 'supportsInterface'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc1155ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc1155ABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<
    typeof erc1155ABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"uri"`.
 */
export function useErc1155Uri<
  TSelectData = ReadContractResult<typeof erc1155ABI, 'uri'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc1155ABI, 'uri', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc1155ABI,
    functionName: 'uri',
    ...config
  } as UseContractReadConfig<typeof erc1155ABI, 'uri', TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155ABI}__.
 */
export function useErc1155Write<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc1155ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc1155ABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc1155ABI, TFunctionName>({
    abi: erc1155ABI,
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useErc1155SafeBatchTransferFrom<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc1155ABI,
          'safeBatchTransferFrom'
        >['abi'],
        'safeBatchTransferFrom'
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc1155ABI,
        'safeBatchTransferFrom'
      > & {
        abi?: never;
        functionName?: 'safeBatchTransferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc1155ABI, 'safeBatchTransferFrom'>({
    abi: erc1155ABI,
    functionName: 'safeBatchTransferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc1155SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc1155ABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof erc1155ABI, 'safeTransferFrom'> & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc1155ABI, 'safeTransferFrom'>({
    abi: erc1155ABI,
    functionName: 'safeTransferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc1155SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc1155ABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof erc1155ABI, 'setApprovalForAll'> & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc1155ABI, 'setApprovalForAll'>({
    abi: erc1155ABI,
    functionName: 'setApprovalForAll',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155ABI}__.
 */
export function usePrepareErc1155Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc1155ABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc1155ABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof erc1155ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareErc1155SafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc1155ABI, 'safeBatchTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc1155ABI,
    functionName: 'safeBatchTransferFrom',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof erc1155ABI,
    'safeBatchTransferFrom'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc1155SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc1155ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc1155ABI,
    functionName: 'safeTransferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc1155ABI, 'safeTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc1155SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc1155ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc1155ABI,
    functionName: 'setApprovalForAll',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc1155ABI, 'setApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155ABI}__.
 */
export function useErc1155Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc1155ABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: erc1155ABI,
    ...config
  } as UseContractEventConfig<typeof erc1155ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc1155ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1155ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc1155ABI,
    eventName: 'ApprovalForAll',
    ...config
  } as UseContractEventConfig<typeof erc1155ABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155ABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useErc1155TransferBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1155ABI, 'TransferBatch'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc1155ABI,
    eventName: 'TransferBatch',
    ...config
  } as UseContractEventConfig<typeof erc1155ABI, 'TransferBatch'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155ABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useErc1155TransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1155ABI, 'TransferSingle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc1155ABI,
    eventName: 'TransferSingle',
    ...config
  } as UseContractEventConfig<typeof erc1155ABI, 'TransferSingle'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155ABI}__ and `eventName` set to `"URI"`.
 */
export function useErc1155UriEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1155ABI, 'URI'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc1155ABI,
    eventName: 'URI',
    ...config
  } as UseContractEventConfig<typeof erc1155ABI, 'URI'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc165ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: erc165ABI, ...config } as UseContractReadConfig<
    typeof erc165ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165SupportsInterface<
  TSelectData = ReadContractResult<typeof erc165ABI, 'supportsInterface'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc165ABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<
    typeof erc165ABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165Upgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: erc165UpgradeableABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc165UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: erc165UpgradeableABI,
    ...config
  } as UseContractReadConfig<
    typeof erc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165UpgradeableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof erc165UpgradeableABI,
    'supportsInterface'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc165UpgradeableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc165UpgradeableABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<
    typeof erc165UpgradeableABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc165UpgradeableABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: erc165UpgradeableABI,
    ...config
  } as UseContractEventConfig<typeof erc165UpgradeableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc165UpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc165UpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc165UpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof erc165UpgradeableABI, 'Initialized'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TSelectData = ReadContractResult<typeof erc20ABI, 'allowance'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TSelectData = ReadContractResult<typeof erc20ABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TSelectData = ReadContractResult<typeof erc20ABI, 'decimals'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TSelectData = ReadContractResult<typeof erc20ABI, 'name'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TSelectData = ReadContractResult<typeof erc20ABI, 'symbol'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TSelectData = ReadContractResult<typeof erc20ABI, 'totalSupply'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({
    abi: erc20ABI,
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'approve'>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'decreaseAllowance'> & {
        abi?: never;
        functionName?: 'decreaseAllowance';
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'decreaseAllowance'>({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'increaseAllowance'> & {
        abi?: never;
        functionName?: 'increaseAllowance';
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'increaseAllowance'>({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transfer'> & {
        abi?: never;
        functionName?: 'transfer';
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transfer'>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transferFrom'>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config
  } as UseContractEventConfig<typeof erc20ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc1155SupplyABI}__.
 */
export function useErc1155Supply(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: erc1155SupplyABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155SupplyABI}__.
 */
export function useErc1155SupplyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc1155SupplyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc1155SupplyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: erc1155SupplyABI,
    ...config
  } as UseContractReadConfig<
    typeof erc1155SupplyABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155SupplyABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc1155SupplyBalanceOf<
  TSelectData = ReadContractResult<typeof erc1155SupplyABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc1155SupplyABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc1155SupplyABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<
    typeof erc1155SupplyABI,
    'balanceOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155SupplyABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useErc1155SupplyBalanceOfBatch<
  TSelectData = ReadContractResult<typeof erc1155SupplyABI, 'balanceOfBatch'>
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc1155SupplyABI,
      'balanceOfBatch',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc1155SupplyABI,
    functionName: 'balanceOfBatch',
    ...config
  } as UseContractReadConfig<
    typeof erc1155SupplyABI,
    'balanceOfBatch',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155SupplyABI}__ and `functionName` set to `"exists"`.
 */
export function useErc1155SupplyExists<
  TSelectData = ReadContractResult<typeof erc1155SupplyABI, 'exists'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc1155SupplyABI, 'exists', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc1155SupplyABI,
    functionName: 'exists',
    ...config
  } as UseContractReadConfig<typeof erc1155SupplyABI, 'exists', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155SupplyABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc1155SupplyIsApprovedForAll<
  TSelectData = ReadContractResult<typeof erc1155SupplyABI, 'isApprovedForAll'>
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc1155SupplyABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc1155SupplyABI,
    functionName: 'isApprovedForAll',
    ...config
  } as UseContractReadConfig<
    typeof erc1155SupplyABI,
    'isApprovedForAll',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155SupplyABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc1155SupplySupportsInterface<
  TSelectData = ReadContractResult<typeof erc1155SupplyABI, 'supportsInterface'>
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc1155SupplyABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc1155SupplyABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<
    typeof erc1155SupplyABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155SupplyABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc1155SupplyTotalSupply<
  TSelectData = ReadContractResult<typeof erc1155SupplyABI, 'totalSupply'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc1155SupplyABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc1155SupplyABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<
    typeof erc1155SupplyABI,
    'totalSupply',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155SupplyABI}__ and `functionName` set to `"uri"`.
 */
export function useErc1155SupplyUri<
  TSelectData = ReadContractResult<typeof erc1155SupplyABI, 'uri'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc1155SupplyABI, 'uri', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc1155SupplyABI,
    functionName: 'uri',
    ...config
  } as UseContractReadConfig<typeof erc1155SupplyABI, 'uri', TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155SupplyABI}__.
 */
export function useErc1155SupplyWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc1155SupplyABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc1155SupplyABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc1155SupplyABI, TFunctionName>({
    abi: erc1155SupplyABI,
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155SupplyABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useErc1155SupplySafeBatchTransferFrom<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc1155SupplyABI,
          'safeBatchTransferFrom'
        >['abi'],
        'safeBatchTransferFrom'
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc1155SupplyABI,
        'safeBatchTransferFrom'
      > & {
        abi?: never;
        functionName?: 'safeBatchTransferFrom';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof erc1155SupplyABI,
    'safeBatchTransferFrom'
  >({
    abi: erc1155SupplyABI,
    functionName: 'safeBatchTransferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155SupplyABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc1155SupplySafeTransferFrom<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc1155SupplyABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc1155SupplyABI,
        'safeTransferFrom'
      > & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc1155SupplyABI, 'safeTransferFrom'>({
    abi: erc1155SupplyABI,
    functionName: 'safeTransferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155SupplyABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc1155SupplySetApprovalForAll<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc1155SupplyABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof erc1155SupplyABI,
        'setApprovalForAll'
      > & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc1155SupplyABI, 'setApprovalForAll'>({
    abi: erc1155SupplyABI,
    functionName: 'setApprovalForAll',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155SupplyABI}__.
 */
export function usePrepareErc1155SupplyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc1155SupplyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc1155SupplyABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof erc1155SupplyABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155SupplyABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareErc1155SupplySafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc1155SupplyABI,
      'safeBatchTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc1155SupplyABI,
    functionName: 'safeBatchTransferFrom',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof erc1155SupplyABI,
    'safeBatchTransferFrom'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155SupplyABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc1155SupplySafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc1155SupplyABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc1155SupplyABI,
    functionName: 'safeTransferFrom',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof erc1155SupplyABI,
    'safeTransferFrom'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155SupplyABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc1155SupplySetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc1155SupplyABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc1155SupplyABI,
    functionName: 'setApprovalForAll',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof erc1155SupplyABI,
    'setApprovalForAll'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155SupplyABI}__.
 */
export function useErc1155SupplyEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc1155SupplyABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: erc1155SupplyABI,
    ...config
  } as UseContractEventConfig<typeof erc1155SupplyABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155SupplyABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc1155SupplyApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1155SupplyABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc1155SupplyABI,
    eventName: 'ApprovalForAll',
    ...config
  } as UseContractEventConfig<typeof erc1155SupplyABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155SupplyABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useErc1155SupplyTransferBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1155SupplyABI, 'TransferBatch'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc1155SupplyABI,
    eventName: 'TransferBatch',
    ...config
  } as UseContractEventConfig<typeof erc1155SupplyABI, 'TransferBatch'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155SupplyABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useErc1155SupplyTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1155SupplyABI, 'TransferSingle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc1155SupplyABI,
    eventName: 'TransferSingle',
    ...config
  } as UseContractEventConfig<typeof erc1155SupplyABI, 'TransferSingle'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155SupplyABI}__ and `eventName` set to `"URI"`.
 */
export function useErc1155SupplyUriEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1155SupplyABI, 'URI'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc1155SupplyABI,
    eventName: 'URI',
    ...config
  } as UseContractEventConfig<typeof erc1155SupplyABI, 'URI'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: erc721ABI, ...config } as UseContractReadConfig<
    typeof erc721ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BalanceOf<
  TSelectData = ReadContractResult<typeof erc721ABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof erc721ABI, 'balanceOf', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721GetApproved<
  TSelectData = ReadContractResult<typeof erc721ABI, 'getApproved'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'getApproved',
    ...config
  } as UseContractReadConfig<typeof erc721ABI, 'getApproved', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721IsApprovedForAll<
  TSelectData = ReadContractResult<typeof erc721ABI, 'isApprovedForAll'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'isApprovedForAll',
    ...config
  } as UseContractReadConfig<
    typeof erc721ABI,
    'isApprovedForAll',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"name"`.
 */
export function useErc721Name<
  TSelectData = ReadContractResult<typeof erc721ABI, 'name'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof erc721ABI, 'name', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721OwnerOf<
  TSelectData = ReadContractResult<typeof erc721ABI, 'ownerOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'ownerOf',
    ...config
  } as UseContractReadConfig<typeof erc721ABI, 'ownerOf', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721SupportsInterface<
  TSelectData = ReadContractResult<typeof erc721ABI, 'supportsInterface'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<
    typeof erc721ABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721Symbol<
  TSelectData = ReadContractResult<typeof erc721ABI, 'symbol'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof erc721ABI, 'symbol', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721TokenUri<
  TSelectData = ReadContractResult<typeof erc721ABI, 'tokenURI'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'tokenURI',
    ...config
  } as UseContractReadConfig<typeof erc721ABI, 'tokenURI', TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Write<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc721ABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721ABI, TFunctionName>({
    abi: erc721ABI,
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721ABI, 'approve'>({
    abi: erc721ABI,
    functionName: 'approve',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'safeTransferFrom'> & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721ABI, 'safeTransferFrom'>({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721ABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'setApprovalForAll'> & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721ABI, 'setApprovalForAll'>({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721ABI, 'transferFrom'>({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function usePrepareErc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: erc721ABI,
    ...config
  } as UseContractEventConfig<typeof erc721ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof erc721ABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'ApprovalForAll',
    ...config
  } as UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof erc721ABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__.
 */
export function useErc1967UpgradeUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: erc1967UpgradeUpgradeableABI, ...config });
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__.
 */
export function useErc1967UpgradeUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    ...config
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useErc1967UpgradeUpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'AdminChanged',
    ...config
  } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    'AdminChanged'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useErc1967UpgradeUpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc1967UpgradeUpgradeableABI,
      'BeaconUpgraded'
    >,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config
  } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    'BeaconUpgraded'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc1967UpgradeUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    'Initialized'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useErc1967UpgradeUpgradeableUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'Upgraded',
    ...config
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Upgraded'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721UriStorageABI}__.
 */
export function useErc721UriStorage(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: erc721UriStorageABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__.
 */
export function useErc721UriStorageRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721UriStorageABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    ...config
  } as UseContractReadConfig<
    typeof erc721UriStorageABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721UriStorageBalanceOf<
  TSelectData = ReadContractResult<typeof erc721UriStorageABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<
    typeof erc721UriStorageABI,
    'balanceOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721UriStorageGetApproved<
  TSelectData = ReadContractResult<typeof erc721UriStorageABI, 'getApproved'>
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageABI,
      'getApproved',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'getApproved',
    ...config
  } as UseContractReadConfig<
    typeof erc721UriStorageABI,
    'getApproved',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721UriStorageIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof erc721UriStorageABI,
    'isApprovedForAll'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'isApprovedForAll',
    ...config
  } as UseContractReadConfig<
    typeof erc721UriStorageABI,
    'isApprovedForAll',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"name"`.
 */
export function useErc721UriStorageName<
  TSelectData = ReadContractResult<typeof erc721UriStorageABI, 'name'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof erc721UriStorageABI, 'name', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721UriStorageOwnerOf<
  TSelectData = ReadContractResult<typeof erc721UriStorageABI, 'ownerOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'ownerOf',
    ...config
  } as UseContractReadConfig<
    typeof erc721UriStorageABI,
    'ownerOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721UriStorageSupportsInterface<
  TSelectData = ReadContractResult<
    typeof erc721UriStorageABI,
    'supportsInterface'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<
    typeof erc721UriStorageABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721UriStorageSymbol<
  TSelectData = ReadContractResult<typeof erc721UriStorageABI, 'symbol'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<
    typeof erc721UriStorageABI,
    'symbol',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721UriStorageTokenUri<
  TSelectData = ReadContractResult<typeof erc721UriStorageABI, 'tokenURI'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'tokenURI',
    ...config
  } as UseContractReadConfig<
    typeof erc721UriStorageABI,
    'tokenURI',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__.
 */
export function useErc721UriStorageWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721UriStorageABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof erc721UriStorageABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721UriStorageABI, TFunctionName>({
    abi: erc721UriStorageABI,
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721UriStorageApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UriStorageABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721UriStorageABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721UriStorageABI, 'approve'>({
    abi: erc721UriStorageABI,
    functionName: 'approve',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721UriStorageSafeTransferFrom<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UriStorageABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UriStorageABI,
        'safeTransferFrom'
      > & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof erc721UriStorageABI,
    'safeTransferFrom'
  >({
    abi: erc721UriStorageABI,
    functionName: 'safeTransferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721UriStorageSetApprovalForAll<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UriStorageABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UriStorageABI,
        'setApprovalForAll'
      > & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof erc721UriStorageABI,
    'setApprovalForAll'
  >({
    abi: erc721UriStorageABI,
    functionName: 'setApprovalForAll',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721UriStorageTransferFrom<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UriStorageABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UriStorageABI,
        'transferFrom'
      > & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721UriStorageABI, 'transferFrom'>({
    abi: erc721UriStorageABI,
    functionName: 'transferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__.
 */
export function usePrepareErc721UriStorageWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721UriStorageABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageABI,
    ...config
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721UriStorageApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721UriStorageABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc721UriStorageABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721UriStorageSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UriStorageABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageABI,
    functionName: 'safeTransferFrom',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageABI,
    'safeTransferFrom'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721UriStorageSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UriStorageABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageABI,
    functionName: 'setApprovalForAll',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageABI,
    'setApprovalForAll'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721UriStorageTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721UriStorageABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageABI,
    'transferFrom'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageABI}__.
 */
export function useErc721UriStorageEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: erc721UriStorageABI,
    ...config
  } as UseContractEventConfig<typeof erc721UriStorageABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721UriStorageApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc721UriStorageABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof erc721UriStorageABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721UriStorageApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc721UriStorageABI,
    eventName: 'ApprovalForAll',
    ...config
  } as UseContractEventConfig<typeof erc721UriStorageABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageABI}__ and `eventName` set to `"BatchMetadataUpdate"`.
 */
export function useErc721UriStorageBatchMetadataUpdateEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageABI, 'BatchMetadataUpdate'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc721UriStorageABI,
    eventName: 'BatchMetadataUpdate',
    ...config
  } as UseContractEventConfig<
    typeof erc721UriStorageABI,
    'BatchMetadataUpdate'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageABI}__ and `eventName` set to `"MetadataUpdate"`.
 */
export function useErc721UriStorageMetadataUpdateEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageABI, 'MetadataUpdate'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc721UriStorageABI,
    eventName: 'MetadataUpdate',
    ...config
  } as UseContractEventConfig<typeof erc721UriStorageABI, 'MetadataUpdate'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721UriStorageTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc721UriStorageABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof erc721UriStorageABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iBeaconUpgradeableABI}__.
 */
export function useIBeaconUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: iBeaconUpgradeableABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconUpgradeableABI}__.
 */
export function useIBeaconUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBeaconUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBeaconUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: iBeaconUpgradeableABI,
    ...config
  } as UseContractReadConfig<
    typeof iBeaconUpgradeableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconUpgradeableABI}__ and `functionName` set to `"implementation"`.
 */
export function useIBeaconUpgradeableImplementation<
  TSelectData = ReadContractResult<
    typeof iBeaconUpgradeableABI,
    'implementation'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBeaconUpgradeableABI,
      'implementation',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iBeaconUpgradeableABI,
    functionName: 'implementation',
    ...config
  } as UseContractReadConfig<
    typeof iBeaconUpgradeableABI,
    'implementation',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc1155ABI}__.
 */
export function useIerc1155(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: ierc1155ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ABI}__.
 */
export function useIerc1155Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1155ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: ierc1155ABI,
    ...config
  } as UseContractReadConfig<typeof ierc1155ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc1155BalanceOf<
  TSelectData = ReadContractResult<typeof ierc1155ABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc1155ABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof ierc1155ABI, 'balanceOf', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useIerc1155BalanceOfBatch<
  TSelectData = ReadContractResult<typeof ierc1155ABI, 'balanceOfBatch'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155ABI, 'balanceOfBatch', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc1155ABI,
    functionName: 'balanceOfBatch',
    ...config
  } as UseContractReadConfig<
    typeof ierc1155ABI,
    'balanceOfBatch',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc1155IsApprovedForAll<
  TSelectData = ReadContractResult<typeof ierc1155ABI, 'isApprovedForAll'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155ABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc1155ABI,
    functionName: 'isApprovedForAll',
    ...config
  } as UseContractReadConfig<
    typeof ierc1155ABI,
    'isApprovedForAll',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc1155SupportsInterface<
  TSelectData = ReadContractResult<typeof ierc1155ABI, 'supportsInterface'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc1155ABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<
    typeof ierc1155ABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ABI}__.
 */
export function useIerc1155Write<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc1155ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc1155ABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc1155ABI, TFunctionName>({
    abi: ierc1155ABI,
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useIerc1155SafeBatchTransferFrom<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155ABI,
          'safeBatchTransferFrom'
        >['abi'],
        'safeBatchTransferFrom'
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155ABI,
        'safeBatchTransferFrom'
      > & {
        abi?: never;
        functionName?: 'safeBatchTransferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc1155ABI, 'safeBatchTransferFrom'>({
    abi: ierc1155ABI,
    functionName: 'safeBatchTransferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc1155SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155ABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc1155ABI, 'safeTransferFrom'> & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc1155ABI, 'safeTransferFrom'>({
    abi: ierc1155ABI,
    functionName: 'safeTransferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc1155SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155ABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof ierc1155ABI, 'setApprovalForAll'> & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc1155ABI, 'setApprovalForAll'>({
    abi: ierc1155ABI,
    functionName: 'setApprovalForAll',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ABI}__.
 */
export function usePrepareIerc1155Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155ABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc1155ABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc1155ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareIerc1155SafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155ABI, 'safeBatchTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc1155ABI,
    functionName: 'safeBatchTransferFrom',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ierc1155ABI,
    'safeBatchTransferFrom'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc1155SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc1155ABI,
    functionName: 'safeTransferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc1155ABI, 'safeTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc1155SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc1155ABI,
    functionName: 'setApprovalForAll',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc1155ABI, 'setApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155ABI}__.
 */
export function useIerc1155Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc1155ABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc1155ABI,
    ...config
  } as UseContractEventConfig<typeof ierc1155ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc1155ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc1155ABI,
    eventName: 'ApprovalForAll',
    ...config
  } as UseContractEventConfig<typeof ierc1155ABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155ABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useIerc1155TransferBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155ABI, 'TransferBatch'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc1155ABI,
    eventName: 'TransferBatch',
    ...config
  } as UseContractEventConfig<typeof ierc1155ABI, 'TransferBatch'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155ABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useIerc1155TransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155ABI, 'TransferSingle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc1155ABI,
    eventName: 'TransferSingle',
    ...config
  } as UseContractEventConfig<typeof ierc1155ABI, 'TransferSingle'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155ABI}__ and `eventName` set to `"URI"`.
 */
export function useIerc1155UriEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155ABI, 'URI'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc1155ABI,
    eventName: 'URI',
    ...config
  } as UseContractEventConfig<typeof ierc1155ABI, 'URI'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721UpgradeableABI}__.
 */
export function useErc721Upgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: erc721UpgradeableABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__.
 */
export function useErc721UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    ...config
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721UpgradeableBalanceOf<
  TSelectData = ReadContractResult<typeof erc721UpgradeableABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UpgradeableABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    'balanceOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721UpgradeableGetApproved<
  TSelectData = ReadContractResult<typeof erc721UpgradeableABI, 'getApproved'>
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UpgradeableABI,
      'getApproved',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'getApproved',
    ...config
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    'getApproved',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721UpgradeableIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof erc721UpgradeableABI,
    'isApprovedForAll'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UpgradeableABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    'isApprovedForAll',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useErc721UpgradeableName<
  TSelectData = ReadContractResult<typeof erc721UpgradeableABI, 'name'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721UpgradeableABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof erc721UpgradeableABI, 'name', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721UpgradeableOwnerOf<
  TSelectData = ReadContractResult<typeof erc721UpgradeableABI, 'ownerOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721UpgradeableABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'ownerOf',
    ...config
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    'ownerOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721UpgradeableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof erc721UpgradeableABI,
    'supportsInterface'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UpgradeableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721UpgradeableSymbol<
  TSelectData = ReadContractResult<typeof erc721UpgradeableABI, 'symbol'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721UpgradeableABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    'symbol',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721UpgradeableTokenUri<
  TSelectData = ReadContractResult<typeof erc721UpgradeableABI, 'tokenURI'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721UpgradeableABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'tokenURI',
    ...config
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    'tokenURI',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__.
 */
export function useErc721UpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721UpgradeableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof erc721UpgradeableABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721UpgradeableABI, TFunctionName>({
    abi: erc721UpgradeableABI,
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721UpgradeableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UpgradeableABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721UpgradeableABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721UpgradeableABI, 'approve'>({
    abi: erc721UpgradeableABI,
    functionName: 'approve',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721UpgradeableSafeTransferFrom<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UpgradeableABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UpgradeableABI,
        'safeTransferFrom'
      > & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof erc721UpgradeableABI,
    'safeTransferFrom'
  >({
    abi: erc721UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721UpgradeableSetApprovalForAll<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UpgradeableABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UpgradeableABI,
        'setApprovalForAll'
      > & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof erc721UpgradeableABI,
    'setApprovalForAll'
  >({
    abi: erc721UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721UpgradeableTransferFrom<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UpgradeableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UpgradeableABI,
        'transferFrom'
      > & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721UpgradeableABI, 'transferFrom'>({
    abi: erc721UpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__.
 */
export function usePrepareErc721UpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721UpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721UpgradeableABI,
    ...config
  } as UsePrepareContractWriteConfig<
    typeof erc721UpgradeableABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721UpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721UpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721UpgradeableABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc721UpgradeableABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721UpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UpgradeableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof erc721UpgradeableABI,
    'safeTransferFrom'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721UpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UpgradeableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof erc721UpgradeableABI,
    'setApprovalForAll'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721UpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721UpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721UpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof erc721UpgradeableABI,
    'transferFrom'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UpgradeableABI}__.
 */
export function useErc721UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721UpgradeableABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: erc721UpgradeableABI,
    ...config
  } as UseContractEventConfig<typeof erc721UpgradeableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721UpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc721UpgradeableABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof erc721UpgradeableABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721UpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UpgradeableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc721UpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config
  } as UseContractEventConfig<typeof erc721UpgradeableABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc721UpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc721UpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof erc721UpgradeableABI, 'Initialized'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721UpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc721UpgradeableABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof erc721UpgradeableABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc1155MetadataUriABI}__.
 */
export function useIerc1155MetadataUri(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: ierc1155MetadataUriABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriABI}__.
 */
export function useIerc1155MetadataUriRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1155MetadataUriABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155MetadataUriABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: ierc1155MetadataUriABI,
    ...config
  } as UseContractReadConfig<
    typeof ierc1155MetadataUriABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc1155MetadataUriBalanceOf<
  TSelectData = ReadContractResult<typeof ierc1155MetadataUriABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155MetadataUriABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc1155MetadataUriABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<
    typeof ierc1155MetadataUriABI,
    'balanceOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useIerc1155MetadataUriBalanceOfBatch<
  TSelectData = ReadContractResult<
    typeof ierc1155MetadataUriABI,
    'balanceOfBatch'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155MetadataUriABI,
      'balanceOfBatch',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc1155MetadataUriABI,
    functionName: 'balanceOfBatch',
    ...config
  } as UseContractReadConfig<
    typeof ierc1155MetadataUriABI,
    'balanceOfBatch',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc1155MetadataUriIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof ierc1155MetadataUriABI,
    'isApprovedForAll'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155MetadataUriABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc1155MetadataUriABI,
    functionName: 'isApprovedForAll',
    ...config
  } as UseContractReadConfig<
    typeof ierc1155MetadataUriABI,
    'isApprovedForAll',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc1155MetadataUriSupportsInterface<
  TSelectData = ReadContractResult<
    typeof ierc1155MetadataUriABI,
    'supportsInterface'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155MetadataUriABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc1155MetadataUriABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<
    typeof ierc1155MetadataUriABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `functionName` set to `"uri"`.
 */
export function useIerc1155MetadataUriUri<
  TSelectData = ReadContractResult<typeof ierc1155MetadataUriABI, 'uri'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155MetadataUriABI, 'uri', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc1155MetadataUriABI,
    functionName: 'uri',
    ...config
  } as UseContractReadConfig<
    typeof ierc1155MetadataUriABI,
    'uri',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriABI}__.
 */
export function useIerc1155MetadataUriWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155MetadataUriABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155MetadataUriABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc1155MetadataUriABI, TFunctionName>({
    abi: ierc1155MetadataUriABI,
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useIerc1155MetadataUriSafeBatchTransferFrom<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155MetadataUriABI,
          'safeBatchTransferFrom'
        >['abi'],
        'safeBatchTransferFrom'
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155MetadataUriABI,
        'safeBatchTransferFrom'
      > & {
        abi?: never;
        functionName?: 'safeBatchTransferFrom';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof ierc1155MetadataUriABI,
    'safeBatchTransferFrom'
  >({
    abi: ierc1155MetadataUriABI,
    functionName: 'safeBatchTransferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc1155MetadataUriSafeTransferFrom<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155MetadataUriABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155MetadataUriABI,
        'safeTransferFrom'
      > & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof ierc1155MetadataUriABI,
    'safeTransferFrom'
  >({
    abi: ierc1155MetadataUriABI,
    functionName: 'safeTransferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc1155MetadataUriSetApprovalForAll<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155MetadataUriABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155MetadataUriABI,
        'setApprovalForAll'
      > & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof ierc1155MetadataUriABI,
    'setApprovalForAll'
  >({
    abi: ierc1155MetadataUriABI,
    functionName: 'setApprovalForAll',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriABI}__.
 */
export function usePrepareIerc1155MetadataUriWrite<
  TFunctionName extends string
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155MetadataUriABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc1155MetadataUriABI,
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ierc1155MetadataUriABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareIerc1155MetadataUriSafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155MetadataUriABI,
      'safeBatchTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc1155MetadataUriABI,
    functionName: 'safeBatchTransferFrom',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ierc1155MetadataUriABI,
    'safeBatchTransferFrom'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc1155MetadataUriSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155MetadataUriABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc1155MetadataUriABI,
    functionName: 'safeTransferFrom',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ierc1155MetadataUriABI,
    'safeTransferFrom'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc1155MetadataUriSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155MetadataUriABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc1155MetadataUriABI,
    functionName: 'setApprovalForAll',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ierc1155MetadataUriABI,
    'setApprovalForAll'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155MetadataUriABI}__.
 */
export function useIerc1155MetadataUriEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc1155MetadataUriABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc1155MetadataUriABI,
    ...config
  } as UseContractEventConfig<typeof ierc1155MetadataUriABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc1155MetadataUriApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155MetadataUriABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc1155MetadataUriABI,
    eventName: 'ApprovalForAll',
    ...config
  } as UseContractEventConfig<typeof ierc1155MetadataUriABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useIerc1155MetadataUriTransferBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155MetadataUriABI, 'TransferBatch'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc1155MetadataUriABI,
    eventName: 'TransferBatch',
    ...config
  } as UseContractEventConfig<typeof ierc1155MetadataUriABI, 'TransferBatch'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useIerc1155MetadataUriTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155MetadataUriABI, 'TransferSingle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc1155MetadataUriABI,
    eventName: 'TransferSingle',
    ...config
  } as UseContractEventConfig<typeof ierc1155MetadataUriABI, 'TransferSingle'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `eventName` set to `"URI"`.
 */
export function useIerc1155MetadataUriUriEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155MetadataUriABI, 'URI'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc1155MetadataUriABI,
    eventName: 'URI',
    ...config
  } as UseContractEventConfig<typeof ierc1155MetadataUriABI, 'URI'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc1155ReceiverABI}__.
 */
export function useIerc1155Receiver(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: ierc1155ReceiverABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ReceiverABI}__.
 */
export function useIerc1155ReceiverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1155ReceiverABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155ReceiverABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: ierc1155ReceiverABI,
    ...config
  } as UseContractReadConfig<
    typeof ierc1155ReceiverABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc1155ReceiverSupportsInterface<
  TSelectData = ReadContractResult<
    typeof ierc1155ReceiverABI,
    'supportsInterface'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155ReceiverABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc1155ReceiverABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<
    typeof ierc1155ReceiverABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__.
 */
export function useIerc1155ReceiverWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc1155ReceiverABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155ReceiverABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc1155ReceiverABI, TFunctionName>({
    abi: ierc1155ReceiverABI,
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useIerc1155ReceiverOnErc1155BatchReceived<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155ReceiverABI,
          'onERC1155BatchReceived'
        >['abi'],
        'onERC1155BatchReceived'
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155ReceiverABI,
        'onERC1155BatchReceived'
      > & {
        abi?: never;
        functionName?: 'onERC1155BatchReceived';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof ierc1155ReceiverABI,
    'onERC1155BatchReceived'
  >({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155BatchReceived',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useIerc1155ReceiverOnErc1155Received<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155ReceiverABI,
          'onERC1155Received'
        >['abi'],
        'onERC1155Received'
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155ReceiverABI,
        'onERC1155Received'
      > & {
        abi?: never;
        functionName?: 'onERC1155Received';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof ierc1155ReceiverABI,
    'onERC1155Received'
  >({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155Received',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__.
 */
export function usePrepareIerc1155ReceiverWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155ReceiverABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverABI,
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ierc1155ReceiverABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareIerc1155ReceiverOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155ReceiverABI,
      'onERC1155BatchReceived'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155BatchReceived',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ierc1155ReceiverABI,
    'onERC1155BatchReceived'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareIerc1155ReceiverOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155ReceiverABI,
      'onERC1155Received'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155Received',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ierc1155ReceiverABI,
    'onERC1155Received'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc20ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance<
  TSelectData = ReadContractResult<typeof ierc20ABI, 'allowance'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof ierc20ABI, 'allowance', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf<
  TSelectData = ReadContractResult<typeof ierc20ABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof ierc20ABI, 'balanceOf', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply<
  TSelectData = ReadContractResult<typeof ierc20ABI, 'totalSupply'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof ierc20ABI, 'totalSupply', TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc20ABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, TFunctionName>({
    abi: ierc20ABI,
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'approve'>({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'transfer'> & {
        abi?: never;
        functionName?: 'transfer';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'transfer'>({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'transferFrom'>({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20ABI,
    ...config
  } as UseContractEventConfig<typeof ierc20ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof ierc20ABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof ierc20ABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__.
 */
export function useErc721UriStorageUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: erc721UriStorageUpgradeableABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__.
 */
export function useErc721UriStorageUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    ...config
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721UriStorageUpgradeableBalanceOf<
  TSelectData = ReadContractResult<
    typeof erc721UriStorageUpgradeableABI,
    'balanceOf'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageUpgradeableABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    'balanceOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721UriStorageUpgradeableGetApproved<
  TSelectData = ReadContractResult<
    typeof erc721UriStorageUpgradeableABI,
    'getApproved'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageUpgradeableABI,
      'getApproved',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'getApproved',
    ...config
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    'getApproved',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721UriStorageUpgradeableIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof erc721UriStorageUpgradeableABI,
    'isApprovedForAll'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageUpgradeableABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    'isApprovedForAll',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useErc721UriStorageUpgradeableName<
  TSelectData = ReadContractResult<
    typeof erc721UriStorageUpgradeableABI,
    'name'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageUpgradeableABI,
      'name',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    'name',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721UriStorageUpgradeableOwnerOf<
  TSelectData = ReadContractResult<
    typeof erc721UriStorageUpgradeableABI,
    'ownerOf'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageUpgradeableABI,
      'ownerOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'ownerOf',
    ...config
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    'ownerOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721UriStorageUpgradeableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof erc721UriStorageUpgradeableABI,
    'supportsInterface'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageUpgradeableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721UriStorageUpgradeableSymbol<
  TSelectData = ReadContractResult<
    typeof erc721UriStorageUpgradeableABI,
    'symbol'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageUpgradeableABI,
      'symbol',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    'symbol',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721UriStorageUpgradeableTokenUri<
  TSelectData = ReadContractResult<
    typeof erc721UriStorageUpgradeableABI,
    'tokenURI'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageUpgradeableABI,
      'tokenURI',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'tokenURI',
    ...config
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    'tokenURI',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__.
 */
export function useErc721UriStorageUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UriStorageUpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof erc721UriStorageUpgradeableABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName
  >({ abi: erc721UriStorageUpgradeableABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721UriStorageUpgradeableApprove<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UriStorageUpgradeableABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UriStorageUpgradeableABI,
        'approve'
      > & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof erc721UriStorageUpgradeableABI,
    'approve'
  >({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'approve',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721UriStorageUpgradeableSafeTransferFrom<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UriStorageUpgradeableABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UriStorageUpgradeableABI,
        'safeTransferFrom'
      > & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof erc721UriStorageUpgradeableABI,
    'safeTransferFrom'
  >({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721UriStorageUpgradeableSetApprovalForAll<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UriStorageUpgradeableABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UriStorageUpgradeableABI,
        'setApprovalForAll'
      > & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof erc721UriStorageUpgradeableABI,
    'setApprovalForAll'
  >({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721UriStorageUpgradeableTransferFrom<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UriStorageUpgradeableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UriStorageUpgradeableABI,
        'transferFrom'
      > & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof erc721UriStorageUpgradeableABI,
    'transferFrom'
  >({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__.
 */
export function usePrepareErc721UriStorageUpgradeableWrite<
  TFunctionName extends string
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UriStorageUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageUpgradeableABI,
    ...config
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721UriStorageUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UriStorageUpgradeableABI,
      'approve'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageUpgradeableABI,
    'approve'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721UriStorageUpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UriStorageUpgradeableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageUpgradeableABI,
    'safeTransferFrom'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721UriStorageUpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UriStorageUpgradeableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageUpgradeableABI,
    'setApprovalForAll'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721UriStorageUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UriStorageUpgradeableABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageUpgradeableABI,
    'transferFrom'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__.
 */
export function useErc721UriStorageUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageUpgradeableABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: erc721UriStorageUpgradeableABI,
    ...config
  } as UseContractEventConfig<
    typeof erc721UriStorageUpgradeableABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721UriStorageUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc721UriStorageUpgradeableABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<
    typeof erc721UriStorageUpgradeableABI,
    'Approval'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721UriStorageUpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc721UriStorageUpgradeableABI,
      'ApprovalForAll'
    >,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc721UriStorageUpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config
  } as UseContractEventConfig<
    typeof erc721UriStorageUpgradeableABI,
    'ApprovalForAll'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc721UriStorageUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc721UriStorageUpgradeableABI,
      'Initialized'
    >,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc721UriStorageUpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<
    typeof erc721UriStorageUpgradeableABI,
    'Initialized'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721UriStorageUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc721UriStorageUpgradeableABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<
    typeof erc721UriStorageUpgradeableABI,
    'Transfer'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20Metadata(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: ierc20MetadataABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    ...config
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataAllowance<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'allowance'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'allowance',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataBalanceOf<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'balanceOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataDecimals<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'decimals'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'decimals',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataName<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'name'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'name', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataSymbol<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'symbol'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'symbol', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataTotalSupply<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'totalSupply'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'totalSupply',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, TFunctionName>({
    abi: ierc20MetadataABI,
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'approve'>({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'transfer'> & {
        abi?: never;
        functionName?: 'transfer';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'transfer'>({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc20MetadataABI,
        'transferFrom'
      > & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'transferFrom'>({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function usePrepareIerc20MetadataWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    ...config
  } as UseContractEventConfig<typeof ierc20MetadataABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc165UpgradeableABI}__.
 */
export function useIerc165Upgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: ierc165UpgradeableABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165UpgradeableABI}__.
 */
export function useIerc165UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc165UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: ierc165UpgradeableABI,
    ...config
  } as UseContractReadConfig<
    typeof ierc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165UpgradeableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof ierc165UpgradeableABI,
    'supportsInterface'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc165UpgradeableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc165UpgradeableABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<
    typeof ierc165UpgradeableABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc4906ABI}__.
 */
export function useIerc4906(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: ierc4906ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc4906ABI}__.
 */
export function useIerc4906Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc4906ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc4906ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: ierc4906ABI,
    ...config
  } as UseContractReadConfig<typeof ierc4906ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc4906ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc4906BalanceOf<
  TSelectData = ReadContractResult<typeof ierc4906ABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc4906ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc4906ABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof ierc4906ABI, 'balanceOf', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc4906ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc4906GetApproved<
  TSelectData = ReadContractResult<typeof ierc4906ABI, 'getApproved'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc4906ABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc4906ABI,
    functionName: 'getApproved',
    ...config
  } as UseContractReadConfig<typeof ierc4906ABI, 'getApproved', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc4906ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc4906IsApprovedForAll<
  TSelectData = ReadContractResult<typeof ierc4906ABI, 'isApprovedForAll'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc4906ABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc4906ABI,
    functionName: 'isApprovedForAll',
    ...config
  } as UseContractReadConfig<
    typeof ierc4906ABI,
    'isApprovedForAll',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc4906ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc4906OwnerOf<
  TSelectData = ReadContractResult<typeof ierc4906ABI, 'ownerOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc4906ABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc4906ABI,
    functionName: 'ownerOf',
    ...config
  } as UseContractReadConfig<typeof ierc4906ABI, 'ownerOf', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc4906ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc4906SupportsInterface<
  TSelectData = ReadContractResult<typeof ierc4906ABI, 'supportsInterface'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc4906ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc4906ABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<
    typeof ierc4906ABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc4906ABI}__.
 */
export function useIerc4906Write<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc4906ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc4906ABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc4906ABI, TFunctionName>({
    abi: ierc4906ABI,
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc4906ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc4906Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc4906ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc4906ABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc4906ABI, 'approve'>({
    abi: ierc4906ABI,
    functionName: 'approve',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc4906ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc4906SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc4906ABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc4906ABI, 'safeTransferFrom'> & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc4906ABI, 'safeTransferFrom'>({
    abi: ierc4906ABI,
    functionName: 'safeTransferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc4906ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc4906SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc4906ABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof ierc4906ABI, 'setApprovalForAll'> & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc4906ABI, 'setApprovalForAll'>({
    abi: ierc4906ABI,
    functionName: 'setApprovalForAll',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc4906ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc4906TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc4906ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc4906ABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc4906ABI, 'transferFrom'>({
    abi: ierc4906ABI,
    functionName: 'transferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc4906ABI}__.
 */
export function usePrepareIerc4906Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc4906ABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc4906ABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc4906ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc4906ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc4906Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc4906ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc4906ABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc4906ABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc4906ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc4906SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc4906ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc4906ABI,
    functionName: 'safeTransferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc4906ABI, 'safeTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc4906ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc4906SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc4906ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc4906ABI,
    functionName: 'setApprovalForAll',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc4906ABI, 'setApprovalForAll'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc4906ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc4906TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc4906ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc4906ABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc4906ABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc4906ABI}__.
 */
export function useIerc4906Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc4906ABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc4906ABI,
    ...config
  } as UseContractEventConfig<typeof ierc4906ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc4906ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc4906ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc4906ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc4906ABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof ierc4906ABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc4906ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc4906ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc4906ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc4906ABI,
    eventName: 'ApprovalForAll',
    ...config
  } as UseContractEventConfig<typeof ierc4906ABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc4906ABI}__ and `eventName` set to `"BatchMetadataUpdate"`.
 */
export function useIerc4906BatchMetadataUpdateEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc4906ABI, 'BatchMetadataUpdate'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc4906ABI,
    eventName: 'BatchMetadataUpdate',
    ...config
  } as UseContractEventConfig<typeof ierc4906ABI, 'BatchMetadataUpdate'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc4906ABI}__ and `eventName` set to `"MetadataUpdate"`.
 */
export function useIerc4906MetadataUpdateEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc4906ABI, 'MetadataUpdate'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc4906ABI,
    eventName: 'MetadataUpdate',
    ...config
  } as UseContractEventConfig<typeof ierc4906ABI, 'MetadataUpdate'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc4906ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc4906TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc4906ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc4906ABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof ierc4906ABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721Metadata(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: ierc721MetadataABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    ...config
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721MetadataBalanceOf<
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    'balanceOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721MetadataGetApproved<
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'getApproved'>
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      'getApproved',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'getApproved',
    ...config
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    'getApproved',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721MetadataIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof ierc721MetadataABI,
    'isApprovedForAll'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'isApprovedForAll',
    ...config
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    'isApprovedForAll',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc721MetadataName<
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'name'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'name', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721MetadataOwnerOf<
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'ownerOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'ownerOf',
    ...config
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    'ownerOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721MetadataSupportsInterface<
  TSelectData = ReadContractResult<
    typeof ierc721MetadataABI,
    'supportsInterface'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc721MetadataSymbol<
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'symbol'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'symbol', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useIerc721MetadataTokenUri<
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'tokenURI'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'tokenURI',
    ...config
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    'tokenURI',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, TFunctionName>({
    abi: ierc721MetadataABI,
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721MetadataApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc721MetadataABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'approve'>({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721MetadataSafeTransferFrom<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataABI,
        'safeTransferFrom'
      > & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'safeTransferFrom'>(
    {
      abi: ierc721MetadataABI,
      functionName: 'safeTransferFrom',
      ...config
    } as any
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721MetadataSetApprovalForAll<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataABI,
        'setApprovalForAll'
      > & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof ierc721MetadataABI,
    'setApprovalForAll'
  >({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721MetadataTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataABI,
        'transferFrom'
      > & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'transferFrom'>({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function usePrepareIerc721MetadataWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721MetadataSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'safeTransferFrom',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataABI,
    'safeTransferFrom'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721MetadataSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataABI,
    'setApprovalForAll'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataABI,
    'transferFrom'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    ...config
  } as UseContractEventConfig<typeof ierc721MetadataABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721MetadataApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'ApprovalForAll',
    ...config
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721ABI,
    ...config
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721BalanceOf<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof ierc721ABI, 'balanceOf', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721GetApproved<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'getApproved'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'getApproved',
    ...config
  } as UseContractReadConfig<typeof ierc721ABI, 'getApproved', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721IsApprovedForAll<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'isApprovedForAll'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'isApprovedForAll',
    ...config
  } as UseContractReadConfig<
    typeof ierc721ABI,
    'isApprovedForAll',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721OwnerOf<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'ownerOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'ownerOf',
    ...config
  } as UseContractReadConfig<typeof ierc721ABI, 'ownerOf', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721SupportsInterface<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'supportsInterface'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<
    typeof ierc721ABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Write<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc721ABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721ABI, TFunctionName>({
    abi: ierc721ABI,
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'approve'>({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'safeTransferFrom'> & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'safeTransferFrom'>({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'setApprovalForAll'> & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'setApprovalForAll'>({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'transferFrom'>({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function usePrepareIerc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc721ABI,
    ...config
  } as UseContractEventConfig<typeof ierc721ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof ierc721ABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'ApprovalForAll',
    ...config
  } as UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof ierc721ABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc165ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: ierc165ABI,
    ...config
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165SupportsInterface<
  TSelectData = ReadContractResult<typeof ierc165ABI, 'supportsInterface'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc165ABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<
    typeof ierc165ABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__.
 */
export function useIerc721MetadataUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: ierc721MetadataUpgradeableABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__.
 */
export function useIerc721MetadataUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    ...config
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721MetadataUpgradeableBalanceOf<
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    'balanceOf'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    'balanceOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721MetadataUpgradeableGetApproved<
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    'getApproved'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      'getApproved',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'getApproved',
    ...config
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    'getApproved',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721MetadataUpgradeableIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    'isApprovedForAll'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    'isApprovedForAll',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useIerc721MetadataUpgradeableName<
  TSelectData = ReadContractResult<typeof ierc721MetadataUpgradeableABI, 'name'>
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      'name',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    'name',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721MetadataUpgradeableOwnerOf<
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    'ownerOf'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      'ownerOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'ownerOf',
    ...config
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    'ownerOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721MetadataUpgradeableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    'supportsInterface'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc721MetadataUpgradeableSymbol<
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    'symbol'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      'symbol',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    'symbol',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useIerc721MetadataUpgradeableTokenUri<
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    'tokenURI'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      'tokenURI',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'tokenURI',
    ...config
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    'tokenURI',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__.
 */
export function useIerc721MetadataUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataUpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataUpgradeableABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName
  >({ abi: ierc721MetadataUpgradeableABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721MetadataUpgradeableApprove<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataUpgradeableABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataUpgradeableABI,
        'approve'
      > & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof ierc721MetadataUpgradeableABI,
    'approve'
  >({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'approve',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721MetadataUpgradeableSafeTransferFrom<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataUpgradeableABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataUpgradeableABI,
        'safeTransferFrom'
      > & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof ierc721MetadataUpgradeableABI,
    'safeTransferFrom'
  >({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721MetadataUpgradeableSetApprovalForAll<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataUpgradeableABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataUpgradeableABI,
        'setApprovalForAll'
      > & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof ierc721MetadataUpgradeableABI,
    'setApprovalForAll'
  >({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721MetadataUpgradeableTransferFrom<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataUpgradeableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataUpgradeableABI,
        'transferFrom'
      > & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof ierc721MetadataUpgradeableABI,
    'transferFrom'
  >({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__.
 */
export function usePrepareIerc721MetadataUpgradeableWrite<
  TFunctionName extends string
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataUpgradeableABI,
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721MetadataUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataUpgradeableABI,
      'approve'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataUpgradeableABI,
    'approve'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721MetadataUpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataUpgradeableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataUpgradeableABI,
    'safeTransferFrom'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721MetadataUpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataUpgradeableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataUpgradeableABI,
    'setApprovalForAll'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721MetadataUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataUpgradeableABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataUpgradeableABI,
    'transferFrom'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__.
 */
export function useIerc721MetadataUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataUpgradeableABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc721MetadataUpgradeableABI,
    ...config
  } as UseContractEventConfig<
    typeof ierc721MetadataUpgradeableABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721MetadataUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc721MetadataUpgradeableABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<
    typeof ierc721MetadataUpgradeableABI,
    'Approval'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721MetadataUpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ierc721MetadataUpgradeableABI,
      'ApprovalForAll'
    >,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc721MetadataUpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config
  } as UseContractEventConfig<
    typeof ierc721MetadataUpgradeableABI,
    'ApprovalForAll'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721MetadataUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc721MetadataUpgradeableABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<
    typeof ierc721MetadataUpgradeableABI,
    'Transfer'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__.
 */
export function useIerc721ReceiverUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: ierc721ReceiverUpgradeableABI, ...config });
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__.
 */
export function useIerc721ReceiverUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ReceiverUpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc721ReceiverUpgradeableABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof ierc721ReceiverUpgradeableABI,
    TFunctionName
  >({ abi: ierc721ReceiverUpgradeableABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useIerc721ReceiverUpgradeableOnErc721Received<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ReceiverUpgradeableABI,
          'onERC721Received'
        >['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721ReceiverUpgradeableABI,
        'onERC721Received'
      > & {
        abi?: never;
        functionName?: 'onERC721Received';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof ierc721ReceiverUpgradeableABI,
    'onERC721Received'
  >({
    abi: ierc721ReceiverUpgradeableABI,
    functionName: 'onERC721Received',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__.
 */
export function usePrepareIerc721ReceiverUpgradeableWrite<
  TFunctionName extends string
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721ReceiverUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverUpgradeableABI,
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ierc721ReceiverUpgradeableABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareIerc721ReceiverUpgradeableOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721ReceiverUpgradeableABI,
      'onERC721Received'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverUpgradeableABI,
    functionName: 'onERC721Received',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ierc721ReceiverUpgradeableABI,
    'onERC721Received'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721UpgradeableABI}__.
 */
export function useIerc721Upgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: ierc721UpgradeableABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__.
 */
export function useIerc721UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    ...config
  } as UseContractReadConfig<
    typeof ierc721UpgradeableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721UpgradeableBalanceOf<
  TSelectData = ReadContractResult<typeof ierc721UpgradeableABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721UpgradeableABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<
    typeof ierc721UpgradeableABI,
    'balanceOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721UpgradeableGetApproved<
  TSelectData = ReadContractResult<typeof ierc721UpgradeableABI, 'getApproved'>
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721UpgradeableABI,
      'getApproved',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    functionName: 'getApproved',
    ...config
  } as UseContractReadConfig<
    typeof ierc721UpgradeableABI,
    'getApproved',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721UpgradeableIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof ierc721UpgradeableABI,
    'isApprovedForAll'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721UpgradeableABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config
  } as UseContractReadConfig<
    typeof ierc721UpgradeableABI,
    'isApprovedForAll',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721UpgradeableOwnerOf<
  TSelectData = ReadContractResult<typeof ierc721UpgradeableABI, 'ownerOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721UpgradeableABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    functionName: 'ownerOf',
    ...config
  } as UseContractReadConfig<
    typeof ierc721UpgradeableABI,
    'ownerOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721UpgradeableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof ierc721UpgradeableABI,
    'supportsInterface'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721UpgradeableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<
    typeof ierc721UpgradeableABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__.
 */
export function useIerc721UpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721UpgradeableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc721UpgradeableABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721UpgradeableABI, TFunctionName>({
    abi: ierc721UpgradeableABI,
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721UpgradeableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721UpgradeableABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc721UpgradeableABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721UpgradeableABI, 'approve'>({
    abi: ierc721UpgradeableABI,
    functionName: 'approve',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721UpgradeableSafeTransferFrom<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721UpgradeableABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721UpgradeableABI,
        'safeTransferFrom'
      > & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof ierc721UpgradeableABI,
    'safeTransferFrom'
  >({
    abi: ierc721UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721UpgradeableSetApprovalForAll<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721UpgradeableABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721UpgradeableABI,
        'setApprovalForAll'
      > & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof ierc721UpgradeableABI,
    'setApprovalForAll'
  >({
    abi: ierc721UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721UpgradeableTransferFrom<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721UpgradeableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721UpgradeableABI,
        'transferFrom'
      > & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721UpgradeableABI, 'transferFrom'>({
    abi: ierc721UpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__.
 */
export function usePrepareIerc721UpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721UpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721UpgradeableABI,
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ierc721UpgradeableABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721UpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721UpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721UpgradeableABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc721UpgradeableABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721UpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721UpgradeableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ierc721UpgradeableABI,
    'safeTransferFrom'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721UpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721UpgradeableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ierc721UpgradeableABI,
    'setApprovalForAll'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721UpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721UpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721UpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ierc721UpgradeableABI,
    'transferFrom'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721UpgradeableABI}__.
 */
export function useIerc721UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721UpgradeableABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc721UpgradeableABI,
    ...config
  } as UseContractEventConfig<typeof ierc721UpgradeableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721UpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721UpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc721UpgradeableABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof ierc721UpgradeableABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721UpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721UpgradeableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc721UpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config
  } as UseContractEventConfig<typeof ierc721UpgradeableABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721UpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721UpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc721UpgradeableABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof ierc721UpgradeableABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link initializableABI}__.
 */
export function useInitializable(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: initializableABI, ...config });
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__.
 */
export function useInitializableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof initializableABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: initializableABI,
    ...config
  } as UseContractEventConfig<typeof initializableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useInitializableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof initializableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: initializableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof initializableABI, 'Initialized'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ownableABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: ownableABI,
    ...config
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<
  TSelectData = ReadContractResult<typeof ownableABI, 'owner'>
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ownableABI,
    functionName: 'owner',
    ...config
  } as UseContractReadConfig<typeof ownableABI, 'owner', TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ownableABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownableABI, TFunctionName>({
    abi: ownableABI,
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ownableABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'renounceOwnership'> & {
        abi?: never;
        functionName?: 'renounceOwnership';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownableABI, 'renounceOwnership'>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ownableABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'transferOwnership'> & {
        abi?: never;
        functionName?: 'transferOwnership';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownableABI, 'transferOwnership'>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: ownableABI,
    ...config
  } as UseContractEventConfig<typeof ownableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: 'OwnershipTransferred',
    ...config
  } as UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function useIerc721Receiver(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: ierc721ReceiverABI, ...config });
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function useIerc721ReceiverWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ReceiverABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc721ReceiverABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721ReceiverABI, TFunctionName>({
    abi: ierc721ReceiverABI,
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useIerc721ReceiverOnErc721Received<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ReceiverABI,
          'onERC721Received'
        >['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721ReceiverABI,
        'onERC721Received'
      > & {
        abi?: never;
        functionName?: 'onERC721Received';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721ReceiverABI, 'onERC721Received'>(
    {
      abi: ierc721ReceiverABI,
      functionName: 'onERC721Received',
      ...config
    } as any
  );
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function usePrepareIerc721ReceiverWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareIerc721ReceiverOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721ReceiverABI,
      'onERC721Received'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverABI,
    functionName: 'onERC721Received',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ierc721ReceiverABI,
    'onERC721Received'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function useOwnableUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: ownableUpgradeableABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function useOwnableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof ownableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: ownableUpgradeableABI,
    ...config
  } as UseContractReadConfig<
    typeof ownableUpgradeableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableUpgradeableOwner<
  TSelectData = ReadContractResult<typeof ownableUpgradeableABI, 'owner'>
>(
  config: Omit<
    UseContractReadConfig<typeof ownableUpgradeableABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ownableUpgradeableABI,
    functionName: 'owner',
    ...config
  } as UseContractReadConfig<
    typeof ownableUpgradeableABI,
    'owner',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function useOwnableUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableUpgradeableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ownableUpgradeableABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownableUpgradeableABI, TFunctionName>({
    abi: ownableUpgradeableABI,
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableUpgradeableRenounceOwnership<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ownableUpgradeableABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof ownableUpgradeableABI,
        'renounceOwnership'
      > & {
        abi?: never;
        functionName?: 'renounceOwnership';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof ownableUpgradeableABI,
    'renounceOwnership'
  >({
    abi: ownableUpgradeableABI,
    functionName: 'renounceOwnership',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableUpgradeableTransferOwnership<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ownableUpgradeableABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof ownableUpgradeableABI,
        'transferOwnership'
      > & {
        abi?: never;
        functionName?: 'transferOwnership';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof ownableUpgradeableABI,
    'transferOwnership'
  >({
    abi: ownableUpgradeableABI,
    functionName: 'transferOwnership',
    ...config
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function usePrepareOwnableUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ownableUpgradeableABI,
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ownableUpgradeableABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableUpgradeableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ownableUpgradeableABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ownableUpgradeableABI,
    functionName: 'renounceOwnership',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ownableUpgradeableABI,
    'renounceOwnership'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableUpgradeableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ownableUpgradeableABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ownableUpgradeableABI,
    functionName: 'transferOwnership',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof ownableUpgradeableABI,
    'transferOwnership'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function useOwnableUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownableUpgradeableABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: ownableUpgradeableABI,
    ...config
  } as UseContractEventConfig<typeof ownableUpgradeableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useOwnableUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ownableUpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof ownableUpgradeableABI, 'Initialized'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableUpgradeableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ownableUpgradeableABI,
      'OwnershipTransferred'
    >,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ownableUpgradeableABI,
    eventName: 'OwnershipTransferred',
    ...config
  } as UseContractEventConfig<
    typeof ownableUpgradeableABI,
    'OwnershipTransferred'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: uupsUpgradeableABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof uupsUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof uupsUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: uupsUpgradeableABI,
    ...config
  } as UseContractReadConfig<
    typeof uupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useUupsUpgradeableProxiableUuid<
  TSelectData = ReadContractResult<typeof uupsUpgradeableABI, 'proxiableUUID'>
>(
  config: Omit<
    UseContractReadConfig<
      typeof uupsUpgradeableABI,
      'proxiableUUID',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: uupsUpgradeableABI,
    functionName: 'proxiableUUID',
    ...config
  } as UseContractReadConfig<
    typeof uupsUpgradeableABI,
    'proxiableUUID',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof uupsUpgradeableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof uupsUpgradeableABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof uupsUpgradeableABI, TFunctionName>({
    abi: uupsUpgradeableABI,
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useUupsUpgradeableUpgradeTo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof uupsUpgradeableABI,
          'upgradeTo'
        >['abi'],
        'upgradeTo'
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<TMode, typeof uupsUpgradeableABI, 'upgradeTo'> & {
        abi?: never;
        functionName?: 'upgradeTo';
      } = {} as any
) {
  return useContractWrite<TMode, typeof uupsUpgradeableABI, 'upgradeTo'>({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useUupsUpgradeableUpgradeToAndCall<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof uupsUpgradeableABI,
          'upgradeToAndCall'
        >['abi'],
        'upgradeToAndCall'
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        TMode,
        typeof uupsUpgradeableABI,
        'upgradeToAndCall'
      > & {
        abi?: never;
        functionName?: 'upgradeToAndCall';
      } = {} as any
) {
  return useContractWrite<TMode, typeof uupsUpgradeableABI, 'upgradeToAndCall'>(
    {
      abi: uupsUpgradeableABI,
      functionName: 'upgradeToAndCall',
      ...config
    } as any
  );
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function usePrepareUupsUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareUupsUpgradeableUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config
  } as UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareUupsUpgradeableUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof uupsUpgradeableABI,
      'upgradeToAndCall'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof uupsUpgradeableABI,
    'upgradeToAndCall'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    ...config
  } as UseContractEventConfig<typeof uupsUpgradeableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useUupsUpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'AdminChanged',
    ...config
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'AdminChanged'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useUupsUpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'BeaconUpgraded'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useUupsUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'Initialized'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useUupsUpgradeableUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'Upgraded',
    ...config
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'Upgraded'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__.
 */
export function useIerc1822ProxiableUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: ierc1822ProxiableUpgradeableABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__.
 */
export function useIerc1822ProxiableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc1822ProxiableUpgradeableABI,
    TFunctionName
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1822ProxiableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: ierc1822ProxiableUpgradeableABI,
    ...config
  } as UseContractReadConfig<
    typeof ierc1822ProxiableUpgradeableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useIerc1822ProxiableUpgradeableProxiableUuid<
  TSelectData = ReadContractResult<
    typeof ierc1822ProxiableUpgradeableABI,
    'proxiableUUID'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1822ProxiableUpgradeableABI,
      'proxiableUUID',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc1822ProxiableUpgradeableABI,
    functionName: 'proxiableUUID',
    ...config
  } as UseContractReadConfig<
    typeof ierc1822ProxiableUpgradeableABI,
    'proxiableUUID',
    TSelectData
  >);
}
